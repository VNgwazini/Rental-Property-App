import React, { FocusEventHandler, KeyboardEvent, ReactNode, ReactText } from 'react';
import { DefaultTheme } from 'styled-components';
import { SelectedOption, IndicatorIconsProps, OptionData } from './types';
export declare type Theme = Partial<DefaultTheme>;
export declare type FocusedOption = SelectedOption & {
    index: number;
    isDisabled?: boolean;
    isSelected?: boolean;
};
export declare type MenuOption = {
    readonly label: ReactText;
    readonly value: ReactText;
    readonly data: OptionData;
    readonly isDisabled?: boolean;
    readonly isSelected?: boolean;
};
export declare type SelectRef = {
    readonly blur: () => void;
    readonly focus: () => void;
    readonly clearValue: () => void;
    readonly toggleMenu: (state?: boolean) => void;
    readonly setValue: (option?: OptionData) => void;
};
export declare type MultiParams = {
    readonly selected: SelectedOption[];
    readonly renderOptionLabel: (data: OptionData) => ReactNode;
};
export declare type SelectProps = {
    readonly async?: boolean;
    readonly inputId?: string;
    readonly selectId?: string;
    readonly isMulti?: boolean;
    readonly ariaLabel?: string;
    readonly required?: boolean;
    readonly loadingMsg?: string;
    readonly autoFocus?: boolean;
    readonly isLoading?: boolean;
    readonly isInvalid?: boolean;
    readonly inputDelay?: number;
    readonly themeConfig?: Theme;
    readonly isDisabled?: boolean;
    readonly placeholder?: string;
    readonly menuWidth?: ReactText;
    readonly menuItemSize?: number;
    readonly isClearable?: boolean;
    readonly noOptionsMsg?: string;
    readonly options?: OptionData[];
    readonly isSearchable?: boolean;
    readonly menuMaxHeight?: number;
    readonly loadingNode?: ReactNode;
    readonly addClassNames?: boolean;
    readonly ariaLabelledBy?: string;
    readonly openMenuOnClick?: boolean;
    readonly openMenuOnFocus?: boolean;
    readonly menuOverscanCount?: number;
    readonly tabSelectsOption?: boolean;
    readonly filterIgnoreCase?: boolean;
    readonly itemKeySelector?: ReactText;
    readonly menuScrollDuration?: number;
    readonly blurInputOnSelect?: boolean;
    readonly closeMenuOnSelect?: boolean;
    readonly isAriaLiveEnabled?: boolean;
    readonly scrollMenuIntoView?: boolean;
    readonly hideSelectedOptions?: boolean;
    readonly filterIgnoreAccents?: boolean;
    readonly backspaceClearsValue?: boolean;
    readonly filterMatchFrom?: 'any' | 'start';
    readonly onMenuOpen?: (...args: any[]) => void;
    readonly onMenuClose?: (...args: any[]) => void;
    readonly onInputChange?: (value?: string) => void;
    readonly menuPosition?: 'top' | 'auto' | 'bottom';
    readonly initialValue?: OptionData | OptionData[];
    readonly onSearchChange?: (value?: string) => void;
    readonly onOptionChange?: (data: OptionData) => void;
    readonly getOptionLabel?: (data: OptionData) => ReactText;
    readonly getOptionValue?: (data: OptionData) => ReactText;
    readonly onInputBlur?: FocusEventHandler<HTMLInputElement>;
    readonly onInputFocus?: FocusEventHandler<HTMLInputElement>;
    readonly renderOptionLabel?: (data: OptionData) => ReactNode;
    readonly getIsOptionDisabled?: (data: OptionData) => boolean;
    readonly getFilterOptionString?: (option: MenuOption) => string;
    readonly renderMultiOptions?: (params: MultiParams) => ReactNode;
    readonly clearIcon?: ReactNode | ((state: Partial<IndicatorIconsProps>) => ReactNode);
    readonly caretIcon?: ReactNode | ((state: Partial<IndicatorIconsProps>) => ReactNode);
    readonly onKeyDown?: (e: KeyboardEvent<HTMLDivElement>, input?: string, focusedOption?: FocusedOption) => void;
};
declare const Select: React.ForwardRefExoticComponent<SelectProps & React.RefAttributes<SelectRef>>;
export default Select;
