import React, { FocusEventHandler, KeyboardEvent, ReactNode, ReactText } from 'react';
import { DefaultTheme } from 'styled-components';
import { OptionData, PartialDeep, SelectedOption, IndicatorIconsProps } from './types';
export declare type Theme = PartialDeep<DefaultTheme>;
export interface FocusedOption extends SelectedOption {
    index: number;
    isDisabled?: boolean;
    isSelected?: boolean;
}
export declare type MenuOption = Readonly<{
    label: ReactText;
    value: ReactText;
    data: OptionData;
    isDisabled?: boolean;
    isSelected?: boolean;
}>;
export declare type SelectRef = Readonly<{
    blur: () => void;
    focus: () => void;
    clearValue: () => void;
    toggleMenu: (state?: boolean) => void;
    setValue: (option?: OptionData) => void;
}>;
export declare type MultiParams = Readonly<{
    selected: SelectedOption[];
    renderOptionLabel: (data: OptionData) => ReactNode;
}>;
export declare type SelectProps = Readonly<{
    async?: boolean;
    inputId?: string;
    selectId?: string;
    isMulti?: boolean;
    ariaLabel?: string;
    required?: boolean;
    loadingMsg?: string;
    autoFocus?: boolean;
    isLoading?: boolean;
    isInvalid?: boolean;
    inputDelay?: number;
    themeConfig?: Theme;
    isDisabled?: boolean;
    placeholder?: string;
    menuWidth?: ReactText;
    menuItemSize?: number;
    isClearable?: boolean;
    noOptionsMsg?: string;
    options?: OptionData[];
    isSearchable?: boolean;
    menuMaxHeight?: number;
    loadingNode?: ReactNode;
    addClassNames?: boolean;
    ariaLabelledBy?: string;
    openMenuOnClick?: boolean;
    openMenuOnFocus?: boolean;
    menuOverscanCount?: number;
    tabSelectsOption?: boolean;
    filterIgnoreCase?: boolean;
    itemKeySelector?: ReactText;
    menuScrollDuration?: number;
    blurInputOnSelect?: boolean;
    closeMenuOnSelect?: boolean;
    isAriaLiveEnabled?: boolean;
    scrollMenuIntoView?: boolean;
    hideSelectedOptions?: boolean;
    filterIgnoreAccents?: boolean;
    backspaceClearsValue?: boolean;
    filterMatchFrom?: 'any' | 'start';
    onMenuOpen?: (...args: any[]) => any;
    onMenuClose?: (...args: any[]) => any;
    onInputChange?: (value?: string) => any;
    menuPosition?: 'top' | 'auto' | 'bottom';
    initialValue?: OptionData | OptionData[];
    onSearchChange?: (value?: string) => any;
    onOptionChange?: (data: OptionData) => any;
    getOptionLabel?: (data: OptionData) => ReactText;
    getOptionValue?: (data: OptionData) => ReactText;
    onInputBlur?: FocusEventHandler<HTMLInputElement>;
    onInputFocus?: FocusEventHandler<HTMLInputElement>;
    renderOptionLabel?: (data: OptionData) => ReactNode;
    getIsOptionDisabled?: (data: OptionData) => boolean;
    getFilterOptionString?: (option: MenuOption) => string;
    renderMultiOptions?: (params: MultiParams) => ReactNode;
    clearIcon?: ReactNode | ((state: Partial<IndicatorIconsProps>) => ReactNode);
    caretIcon?: ReactNode | ((state: Partial<IndicatorIconsProps>) => ReactNode);
    onKeyDown?: (e: KeyboardEvent<HTMLDivElement>, input?: string, focusedOption?: FocusedOption) => any;
}>;
declare const Select: React.ForwardRefExoticComponent<Readonly<{
    async?: boolean | undefined;
    inputId?: string | undefined;
    selectId?: string | undefined;
    isMulti?: boolean | undefined;
    ariaLabel?: string | undefined;
    required?: boolean | undefined;
    loadingMsg?: string | undefined;
    autoFocus?: boolean | undefined;
    isLoading?: boolean | undefined;
    isInvalid?: boolean | undefined;
    inputDelay?: number | undefined;
    themeConfig?: PartialDeep<DefaultTheme> | undefined;
    isDisabled?: boolean | undefined;
    placeholder?: string | undefined;
    menuWidth?: string | number | undefined;
    menuItemSize?: number | undefined;
    isClearable?: boolean | undefined;
    noOptionsMsg?: string | undefined;
    options?: any[] | undefined;
    isSearchable?: boolean | undefined;
    menuMaxHeight?: number | undefined;
    loadingNode?: ReactNode;
    addClassNames?: boolean | undefined;
    ariaLabelledBy?: string | undefined;
    openMenuOnClick?: boolean | undefined;
    openMenuOnFocus?: boolean | undefined;
    menuOverscanCount?: number | undefined;
    tabSelectsOption?: boolean | undefined;
    filterIgnoreCase?: boolean | undefined;
    itemKeySelector?: string | number | undefined;
    menuScrollDuration?: number | undefined;
    blurInputOnSelect?: boolean | undefined;
    closeMenuOnSelect?: boolean | undefined;
    isAriaLiveEnabled?: boolean | undefined;
    scrollMenuIntoView?: boolean | undefined;
    hideSelectedOptions?: boolean | undefined;
    filterIgnoreAccents?: boolean | undefined;
    backspaceClearsValue?: boolean | undefined;
    filterMatchFrom?: "any" | "start" | undefined;
    onMenuOpen?: ((...args: any[]) => any) | undefined;
    onMenuClose?: ((...args: any[]) => any) | undefined;
    onInputChange?: ((value?: string | undefined) => any) | undefined;
    menuPosition?: "auto" | "top" | "bottom" | undefined;
    initialValue?: OptionData | OptionData[];
    onSearchChange?: ((value?: string | undefined) => any) | undefined;
    onOptionChange?: ((data: OptionData) => any) | undefined;
    getOptionLabel?: ((data: OptionData) => ReactText) | undefined;
    getOptionValue?: ((data: OptionData) => ReactText) | undefined;
    onInputBlur?: ((event: React.FocusEvent<HTMLInputElement>) => void) | undefined;
    onInputFocus?: ((event: React.FocusEvent<HTMLInputElement>) => void) | undefined;
    renderOptionLabel?: ((data: OptionData) => ReactNode) | undefined;
    getIsOptionDisabled?: ((data: OptionData) => boolean) | undefined;
    getFilterOptionString?: ((option: MenuOption) => string) | undefined;
    renderMultiOptions?: ((params: MultiParams) => ReactNode) | undefined;
    clearIcon?: string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | ((state: Partial<IndicatorIconsProps>) => ReactNode) | null | undefined;
    caretIcon?: string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | ((state: Partial<IndicatorIconsProps>) => ReactNode) | null | undefined;
    onKeyDown?: ((e: KeyboardEvent<HTMLDivElement>, input?: string | undefined, focusedOption?: FocusedOption | undefined) => any) | undefined;
}> & React.RefAttributes<Readonly<{
    blur: () => void;
    focus: () => void;
    clearValue: () => void;
    toggleMenu: (state?: boolean | undefined) => void;
    setValue: (option?: OptionData) => void;
}>>>;
export { Select };
