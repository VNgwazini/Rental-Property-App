import { useUpdateEffect } from './useUpdateEffect';
import { MenuPositionEnum } from '../constants/enums';
import { useEffect, useState, useRef } from 'react';
import { calculateMenuTop, menuFitsBelowControl, scrollMenuIntoViewOnOpen } from '../utils';
export const useMenuPositioner = (menuRef, controlRef, menuOpen, menuPosition, menuItemSize, menuHeightDefault, menuOptionsLength, menuScrollDuration, scrollMenuIntoView, onMenuOpen, onMenuClose) => {
    const resetMenuHeightRef = useRef(false);
    const isMenuTopPositionRef = useRef(false);
    const [menuHeight, setMenuHeight] = useState(menuHeightDefault);
    const [isMenuTopPosition, setIsMenuTopPosition] = useState(menuPosition === MenuPositionEnum.TOP);
    useEffect(() => {
        isMenuTopPositionRef.current = isMenuTopPosition;
    }, [isMenuTopPosition]);
    useEffect(() => {
        const isTopPosition = menuPosition === MenuPositionEnum.TOP ||
            (menuPosition === MenuPositionEnum.AUTO && !menuFitsBelowControl(menuRef.current));
        setIsMenuTopPosition(isTopPosition);
    }, [menuRef, menuPosition]);
    useUpdateEffect(() => {
        if (menuOpen) {
            const handleOnMenuOpen = (availableSpace) => {
                onMenuOpen?.();
                if (availableSpace) {
                    resetMenuHeightRef.current = true;
                    setMenuHeight(availableSpace);
                }
            };
            !isMenuTopPositionRef.current
                ? scrollMenuIntoViewOnOpen(menuRef.current, menuScrollDuration, scrollMenuIntoView, handleOnMenuOpen)
                : handleOnMenuOpen();
        }
        else {
            onMenuClose?.();
            if (resetMenuHeightRef.current) {
                resetMenuHeightRef.current = false;
                setMenuHeight(menuHeightDefault);
            }
        }
    }, [menuRef, menuOpen, onMenuClose, onMenuOpen, menuHeightDefault, scrollMenuIntoView, menuScrollDuration]);
    const menuHeightCalc = Math.min(menuHeight, menuOptionsLength * menuItemSize);
    const menuStyleTop = isMenuTopPosition
        ? calculateMenuTop(menuHeightCalc, menuRef.current, controlRef.current)
        : undefined;
    return [menuStyleTop, menuHeightCalc];
};
