import { useEffect, useState } from 'react';
import { trimAndFormatFilterStr } from '../utils';
import { FilterMatchEnum } from '../constants/enums';
import { OPTIONS_DEFAULT } from '../constants/defaults';
export const useMenuOptions = (options, debouncedInputValue, filterMatchFrom, selectedOption, getOptionValue, getOptionLabel, getIsOptionDisabled, getFilterOptionString, filterIgnoreCase, filterIgnoreAccents, isMulti, hideSelectedOptions, async) => {
    const [menuOptions, setMenuOptions] = useState(OPTIONS_DEFAULT);
    const searchValue = !async ? debouncedInputValue : '';
    const hideSelectedOptionsOrDefault = (typeof hideSelectedOptions !== 'boolean') ? !!isMulti : hideSelectedOptions;
    useEffect(() => {
        const normalizedInput = trimAndFormatFilterStr(searchValue, filterIgnoreCase, filterIgnoreAccents);
        const selectedHash = new Set(selectedOption.map(({ value }) => value));
        const getIsOptionDisabledOrDefault = getIsOptionDisabled || ((data) => !!data.isDisabled);
        const getFilterOptionStringOrDefault = getFilterOptionString || ((option) => (typeof option.label === 'string') ? option.label : `${option.label}`);
        const isOptionFilterMatch = (menuOption) => {
            const optionStr = getFilterOptionStringOrDefault(menuOption);
            const normalizedOptionLabel = trimAndFormatFilterStr(optionStr, filterIgnoreCase, filterIgnoreAccents);
            return (filterMatchFrom === FilterMatchEnum.ANY)
                ? normalizedOptionLabel.indexOf(normalizedInput) > -1
                : normalizedOptionLabel.substr(0, normalizedInput.length) === normalizedInput;
        };
        const parseMenuOption = (data) => {
            const value = getOptionValue(data);
            const label = getOptionLabel(data);
            const menuOption = {
                data,
                value,
                label,
                ...(getIsOptionDisabledOrDefault(data) && { isDisabled: true }),
                ...(selectedHash.has(value) && { isSelected: true })
            };
            if ((normalizedInput && !isOptionFilterMatch(menuOption)) ||
                (hideSelectedOptionsOrDefault && menuOption.isSelected)) {
                return;
            }
            return menuOption;
        };
        const menuOptionsOrDefault = options.reduce((acc, data) => {
            const option = parseMenuOption(data);
            option && acc.push(option);
            return acc;
        }, []);
        setMenuOptions(menuOptionsOrDefault);
    }, [options, selectedOption, searchValue, hideSelectedOptionsOrDefault, filterMatchFrom, filterIgnoreCase, filterIgnoreAccents, getFilterOptionString, getIsOptionDisabled, getOptionValue, getOptionLabel]);
    return menuOptions;
};
