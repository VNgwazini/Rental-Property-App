import _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';
import _taggedTemplateLiteral from '@babel/runtime/helpers/esm/taggedTemplateLiteral';
import React, { useMemo, Fragment, useState, useEffect, useRef, useCallback, useImperativeHandle } from 'react';
import styled, { keyframes, css, ThemeProvider } from 'styled-components';
import { areEqual, FixedSizeList } from 'react-window';
import _typeof from '@babel/runtime/helpers/esm/typeof';

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " 0.225s ease-in-out forwards"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["", " 1.19s ease-in-out infinite"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["from{opacity:0;}to{opacity:1;}"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["0%,80%,100%{transform:scale(0);}40%{transform:scale(1.0);}"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var _bounce_keyframes = keyframes(_templateObject());

var _fade_in_keyframes = keyframes(_templateObject2());

var BOUNCE_ANIMATION_CSS = css(_templateObject3(), _bounce_keyframes);
var FADE_IN_ANIMATION_CSS = css(_templateObject4(), _fade_in_keyframes);

var RfsTheme = {
  color: {
    border: '#ced4da',
    danger: '#dc3545',
    primary: '#007bff',
    disabled: '#e9ecef',
    placeholder: '#6E7276',
    dangerLight: 'rgba(220, 53, 69, 0.25)'
  },
  input: {},
  select: {},
  loader: {
    size: '0.625rem',
    padding: '0.375rem 0.75rem',
    animation: BOUNCE_ANIMATION_CSS,
    color: 'rgba(0, 123, 255, 0.42)'
  },
  icon: {
    color: '#ccc',
    hoverColor: '#A6A6A6',
    padding: '0 0.9375rem',
    clear: {
      width: '14px',
      height: '16px',
      animation: FADE_IN_ANIMATION_CSS,
      transition: 'color 0.15s ease-in-out'
    },
    caret: {
      size: '7px',
      transition: 'transform 0.25s ease-in-out, color 0.15s ease-in-out'
    }
  },
  control: {
    minHeight: '38px',
    borderWidth: '1px',
    borderStyle: 'solid',
    borderRadius: '0.25rem',
    boxShadow: '0 0 0 0.2rem',
    padding: '0.375rem 0.75rem',
    boxShadowColor: 'rgba(0, 123, 255, 0.25)',
    focusedBorderColor: 'rgba(0, 123, 255, 0.75)',
    transition: 'box-shadow 0.15s ease-in-out, border-color 0.15s ease-in-out'
  },
  menu: {
    padding: '0',
    width: '100%',
    margin: '0.5rem 0',
    borderRadius: '0.25rem',
    backgroundColor: '#fff',
    animation: FADE_IN_ANIMATION_CSS,
    boxShadow: '0 0 0 1px rgba(0, 0, 0, 0.1), 0 4px 11px rgba(0, 0, 0, 0.1)',
    option: {
      textAlign: 'left',
      selectedColor: '#fff',
      selectedBgColor: '#007bff',
      padding: '0.375rem 0.75rem',
      focusedBgColor: 'rgba(0, 123, 255, 0.20)'
    }
  },
  noOptions: {
    fontSize: '1.25rem',
    margin: '0.25rem 0',
    color: 'hsl(0, 0%, 60%)',
    padding: '0.375rem 0.75rem'
  },
  multiValue: {
    margin: '1px 2px',
    borderRadius: '0.25rem',
    backgroundColor: '#e7edf3',
    animation: FADE_IN_ANIMATION_CSS,
    label: {
      fontSize: '0.825em',
      borderRadius: '0.25rem',
      padding: '1px 2px 1px 6px'
    },
    clear: {
      fontWeight: 700,
      padding: '0 7px',
      fontSize: '0.67em',
      alignItems: 'center',
      borderRadius: '0.25rem',
      transition: 'color 0.15s ease-in-out, background-color 0.15s ease-in-out'
    }
  }
};

var MENU_ITEM_SIZE_DEFAULT = 35;
var MENU_MAX_HEIGHT_DEFAULT = 300;
var FOCUSED_MULTI_DEFAULT = null;
var ON_CHANGE_SINGLE_VALUE_DEFAULT = null;
var LOADING_MSG_DEFAULT = 'Loading...';
var NO_OPTIONS_MSG_DEFAULT = 'No options';
var PLACEHOLDER_DEFAULT = 'Select option...';
var OPTIONS_DEFAULT = [];
var SELECTED_OPTION_DEFAULT = [];
var FOCUSED_OPTION_DEFAULT = {
  index: -1
};

var OVERFLOW_REGEXP = /(auto|scroll)/;
var DIACRITICS_REGEXP = /[\u0300-\u036f]/g;
var IE_EDGE_BROWSER_REGEXP = /(MSIE|Trident\/|Edge\/|Edg\/)/i;

var _isTest = process.env.NODE_ENV === 'test';

var OPTION_CLS = 'rfs-option';
var OPTION_FOCUSED_CLS = "".concat(OPTION_CLS, "-focused");
var OPTION_SELECTED_CLS = "".concat(OPTION_CLS, "-selected");
var OPTION_DISABLED_CLS = "".concat(OPTION_CLS, "-disabled");
var CARET_ICON_CLS = 'rfs-caret-icon';
var CLEAR_ICON_CLS = 'rfs-clear-icon';
var LOADING_DOTS_CLS = 'rfs-loading-dots';
var AUTOSIZE_INPUT_CLS = 'rfs-autosize-input';
var MENU_CONTAINER_CLS = 'rfs-menu-container';
var SELECT_CONTAINER_CLS = 'rfs-select-container';
var CONTROL_CONTAINER_CLS = 'rfs-control-container';
var ARIA_LIVE_TESTID = _isTest ? 'rfs-aria-live' : undefined;
var CLEAR_ICON_TESTID = _isTest ? CLEAR_ICON_CLS : undefined;
var CARET_ICON_TESTID = _isTest ? CARET_ICON_CLS : undefined;
var AUTOSIZE_INPUT_TESTID = _isTest ? AUTOSIZE_INPUT_CLS : undefined;
var MENU_CONTAINER_TESTID = _isTest ? MENU_CONTAINER_CLS : undefined;
var CLEAR_ICON_MV_TESTID = _isTest ? "".concat(CLEAR_ICON_CLS, "-mv") : undefined;
var SELECT_CONTAINER_TESTID = _isTest ? SELECT_CONTAINER_CLS : undefined;
var CONTROL_CONTAINER_TESTID = _isTest ? CONTROL_CONTAINER_CLS : undefined;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function isDocumentElement(el) {
  return el === document.documentElement || el === document.body || el === window;
}

function stripDiacritics(value) {
  return value.normalize('NFD').replace(DIACRITICS_REGEXP, '');
}

function easeOutCubic(t, s, c, d) {
  return c * ((t = t / d - 1) * t * t + 1) + s;
}

function getScrollTop(el) {
  return isDocumentElement(el) ? window.pageYOffset : el.scrollTop;
}

function scrollTo(el, top) {
  isDocumentElement(el) ? window.scrollTo(0, top) : el.scrollTop = top;
}

function getScrollParent(el) {
  var style = getComputedStyle(el);
  var excludeStaticParent = style.position === 'absolute';

  if (style.position === 'fixed') {
    return document.documentElement;
  }

  for (var parent = el; parent = parent ? parent.parentElement : null;) {
    style = getComputedStyle(parent);

    if (!(excludeStaticParent && style.position === 'static') && OVERFLOW_REGEXP.test("".concat(style.overflow).concat(style.overflowY).concat(style.overflowX))) {
      return parent;
    }
  }

  return document.documentElement;
}

function smoothScrollTo(element, to) {
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
  var callback = arguments.length > 3 ? arguments[3] : undefined;
  var currentTime = 0;
  var start = getScrollTop(element);
  var change = to - start;

  function smoothScroller() {
    currentTime += 5;
    scrollTo(element, easeOutCubic(currentTime, start, change, duration));

    if (currentTime < duration) {
      window.requestAnimationFrame(smoothScroller);
    } else {
      callback && callback();
    }
  }

  window.requestAnimationFrame(smoothScroller);
}

var isEdgeOrIE = function isEdgeOrIE() {
  return typeof navigator !== 'undefined' && IE_EDGE_BROWSER_REGEXP.test(navigator.userAgent);
};
var isTouchDevice = function isTouchDevice() {
  return typeof window !== 'undefined' && 'ontouchstart' in window || typeof navigator !== 'undefined' && !!navigator.maxTouchPoints;
};
function isArrayWithLength(test) {
  return Array.isArray(test) && !!test.length;
}
function isPlainObject(test) {
  return test && _typeof(test) === 'object' && !Array.isArray(test);
}
function optionClassName(isDisabled, isSelected, isFocused) {
  var className = OPTION_CLS;
  if (isDisabled) className += ' ' + OPTION_DISABLED_CLS;
  if (isSelected) className += ' ' + OPTION_SELECTED_CLS;
  if (isFocused) className += ' ' + OPTION_FOCUSED_CLS;
  return className;
}
function trimAndFormatFilterStr(value, filterIgnoreCase, filterIgnoreAccents) {
  var trimVal = value.trim();

  if (filterIgnoreCase) {
    trimVal = trimVal.toLowerCase();
  }

  return !filterIgnoreAccents ? trimVal : stripDiacritics(trimVal);
}
function mergeDeep(target, source) {
  var output = _objectSpread({}, target);

  Object.keys(source).forEach(function (key) {
    output[key] = isPlainObject(source[key]) && key !== 'animation' ? key in target ? mergeDeep(target[key], source[key]) : source[key] : source[key] || '';
  });
  return output;
}
var calculateMenuTop = function calculateMenuTop(menuHeight, menuEl, controlEl) {
  var menuHeightOrDefault = menuHeight > 0 || !menuEl ? menuHeight : menuEl.getBoundingClientRect().height;
  var controlHeight = controlEl ? controlEl.getBoundingClientRect().height : 0;
  var menuElStyle = menuEl && getComputedStyle(menuEl);
  var marginBottom = menuElStyle ? parseInt(menuElStyle.marginBottom || '0', 10) : 0;
  var marginTop = menuElStyle ? parseInt(menuElStyle.marginTop || '0', 10) : 0;
  return "calc(".concat(-Math.abs(menuHeightOrDefault + controlHeight), "px + ").concat(marginBottom + marginTop, "px)");
};
function menuFitsBelowControl(menuEl) {
  if (!menuEl) return true;
  var menuRect = menuEl.getBoundingClientRect();
  var scrollParent = getScrollParent(menuEl);
  var scrollTop = getScrollTop(scrollParent);
  var scrollSpaceBelow = scrollParent.getBoundingClientRect().height - scrollTop - menuRect.top;
  return scrollSpaceBelow >= menuRect.height;
}
function scrollMenuIntoViewOnOpen(menuEl, menuScrollDuration, scrollMenuIntoView, handleOnMenuOpen) {
  if (!menuEl) {
    handleOnMenuOpen();
    return;
  }

  var viewInner = window.innerHeight;
  var menuRect = menuEl.getBoundingClientRect();
  var viewSpaceBelow = viewInner - menuRect.top;

  if (viewSpaceBelow >= menuRect.height) {
    handleOnMenuOpen();
    return;
  }

  var scrollParent = getScrollParent(menuEl);
  var scrollTop = getScrollTop(scrollParent);
  var scrollSpaceBelow = scrollParent.getBoundingClientRect().height - scrollTop - menuRect.top;
  var notEnoughSpaceBelow = scrollSpaceBelow < menuRect.height;

  if (notEnoughSpaceBelow || !scrollMenuIntoView) {
    var condensedMenuHeight = notEnoughSpaceBelow ? scrollSpaceBelow : undefined;
    handleOnMenuOpen(condensedMenuHeight);
    return;
  }

  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom || '0', 10);
  var scrollDown = menuRect.bottom - viewInner + scrollTop + marginBottom;
  smoothScrollTo(scrollParent, scrollDown, menuScrollDuration, handleOnMenuOpen);
}
function normalizeValue(value, getOptionValue, getOptionLabel) {
  var initialValues = Array.isArray(value) ? value : isPlainObject(value) ? [value] : SELECTED_OPTION_DEFAULT;
  return isArrayWithLength(initialValues) ? initialValues.map(function (x) {
    return {
      data: x,
      value: getOptionValue(x),
      label: getOptionLabel(x)
    };
  }) : initialValues;
}

var Option = /*#__PURE__*/React.memo(function (_ref) {
  var index = _ref.index,
      style = _ref.style,
      _ref$data = _ref.data,
      menuOptions = _ref$data.menuOptions,
      selectOption = _ref$data.selectOption,
      renderOptionLabel = _ref$data.renderOptionLabel,
      focusedOptionIndex = _ref$data.focusedOptionIndex;
  var _menuOptions$index = menuOptions[index],
      data = _menuOptions$index.data,
      value = _menuOptions$index.value,
      label = _menuOptions$index.label,
      isDisabled = _menuOptions$index.isDisabled,
      isSelected = _menuOptions$index.isSelected;
  var className = optionClassName(isDisabled, isSelected, index === focusedOptionIndex);
  var onClickHandler = !isDisabled ? function () {
    return selectOption({
      data: data,
      value: value,
      label: label
    }, isSelected);
  } : undefined;
  return /*#__PURE__*/React.createElement("div", {
    style: style,
    className: className,
    onClick: onClickHandler
  }, renderOptionLabel(data));
}, areEqual);
Option.displayName = 'Option';

function _templateObject$1() {
  var data = _taggedTemplateLiteral(["text-align:center;", " ", ""]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var NoOptionsMsg = styled.div(_templateObject$1(), function (_ref) {
  var noOptions = _ref.theme.noOptions;
  return "color: ".concat(noOptions.color, ";margin: ").concat(noOptions.margin, ";padding: ").concat(noOptions.padding, ";font-size: ").concat(noOptions.fontSize, ";");
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.noOptions.css;
});
var Menu = /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var width = _ref3.width,
      height = _ref3.height,
      itemSize = _ref3.itemSize,
      isLoading = _ref3.isLoading,
      loadingMsg = _ref3.loadingMsg,
      menuOptions = _ref3.menuOptions,
      selectOption = _ref3.selectOption,
      noOptionsMsg = _ref3.noOptionsMsg,
      overscanCount = _ref3.overscanCount,
      itemKeySelector = _ref3.itemKeySelector,
      renderOptionLabel = _ref3.renderOptionLabel,
      focusedOptionIndex = _ref3.focusedOptionIndex;
  var itemKey = useMemo(function () {
    return itemKeySelector ? function (idx, data) {
      return data.menuOptions[idx][itemKeySelector];
    } : undefined;
  }, [itemKeySelector]);
  var itemData = useMemo(function () {
    return {
      menuOptions: menuOptions,
      selectOption: selectOption,
      renderOptionLabel: renderOptionLabel,
      focusedOptionIndex: focusedOptionIndex
    };
  }, [menuOptions, focusedOptionIndex, selectOption, renderOptionLabel]);

  if (isLoading) {
    return /*#__PURE__*/React.createElement(NoOptionsMsg, null, loadingMsg);
  }

  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(FixedSizeList, {
    ref: ref,
    width: width,
    height: height,
    itemKey: itemKey,
    itemSize: itemSize,
    itemData: itemData,
    overscanCount: overscanCount,
    itemCount: menuOptions.length
  }, Option), !isArrayWithLength(menuOptions) && /*#__PURE__*/React.createElement(NoOptionsMsg, null, noOptionsMsg));
});
Menu.displayName = 'Menu';

function _templateObject4$1() {
  var data = _taggedTemplateLiteral(["display:flex;", ""]);

  _templateObject4$1 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$1() {
  var data = _taggedTemplateLiteral(["overflow:hidden;white-space:nowrap;text-overflow:ellipsis;", ""]);

  _templateObject3$1 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  var data = _taggedTemplateLiteral(["", ""]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$2() {
  var data = _taggedTemplateLiteral(["min-width:0;display:flex;animation:", ";", " ", ""]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var MultiValueWrapper = styled.div(_templateObject$2(), function (_ref) {
  var theme = _ref.theme;
  return css(_templateObject2$1(), theme.multiValue.animation);
}, function (_ref2) {
  var multiValue = _ref2.theme.multiValue;
  return "margin: ".concat(multiValue.margin, ";border-radius: ").concat(multiValue.borderRadius, ";background-color: ").concat(multiValue.backgroundColor, ";");
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.multiValue.css;
});
var Label = styled.div(_templateObject3$1(), function (_ref4) {
  var label = _ref4.theme.multiValue.label;
  return "padding: ".concat(label.padding, ";font-size: ").concat(label.fontSize, ";border-radius: ").concat(label.borderRadius, ";");
});
var Clear = styled.div(_templateObject4$1(), function (_ref5) {
  var isFocused = _ref5.isFocused,
      _ref5$theme = _ref5.theme,
      color = _ref5$theme.color,
      clear = _ref5$theme.multiValue.clear;
  return "padding: ".concat(clear.padding, ";font-size: ").concat(clear.fontSize, ";transition: ").concat(clear.transition, ";align-items: ").concat(clear.alignItems, ";font-weight: ").concat(clear.fontWeight, ";border-radius: ").concat(clear.borderRadius, ";background-color: ").concat(isFocused ? color.dangerLight : 'transparent', ";:hover {color: ").concat(color.danger, ";background-color: ").concat(color.dangerLight, ";}");
});

var MultiValue = function MultiValue(_ref6) {
  var data = _ref6.data,
      value = _ref6.value,
      isFocused = _ref6.isFocused,
      renderOptionLabel = _ref6.renderOptionLabel,
      removeSelectedOption = _ref6.removeSelectedOption;
  return /*#__PURE__*/React.createElement(MultiValueWrapper, null, /*#__PURE__*/React.createElement(Label, null, renderOptionLabel(data)), /*#__PURE__*/React.createElement(Clear, {
    isFocused: isFocused,
    "data-testid": CLEAR_ICON_MV_TESTID,
    onTouchEnd: function onTouchEnd(e) {
      return removeSelectedOption(value, e);
    },
    onMouseDown: function onMouseDown(e) {
      return removeSelectedOption(value, e);
    }
  }, "X"));
};

function _templateObject2$2() {
  var data = _taggedTemplateLiteral(["top:50%;overflow:hidden;position:absolute;white-space:nowrap;box-sizing:border-box;text-overflow:ellipsis;transform:translateY(-50%);color:", ";"]);

  _templateObject2$2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$3() {
  var data = _taggedTemplateLiteral(["top:50%;overflow:hidden;position:absolute;white-space:nowrap;box-sizing:border-box;text-overflow:ellipsis;transform:translateY(-50%);max-width:calc(100% - 0.5rem);"]);

  _templateObject$3 = function _templateObject() {
    return data;
  };

  return data;
}
var SingleValue = styled.div(_templateObject$3());
var Placeholder = styled.div(_templateObject2$2(), function (_ref) {
  var theme = _ref.theme;
  return theme.color.placeholder;
});
var Value = /*#__PURE__*/React.memo(function (_ref2) {
  var isMulti = _ref2.isMulti,
      inputValue = _ref2.inputValue,
      placeholder = _ref2.placeholder,
      selectedOption = _ref2.selectedOption,
      focusedMultiValue = _ref2.focusedMultiValue,
      renderOptionLabel = _ref2.renderOptionLabel,
      renderMultiOptions = _ref2.renderMultiOptions,
      removeSelectedOption = _ref2.removeSelectedOption;

  if (inputValue && (!isMulti || isMulti && (!isArrayWithLength(selectedOption) || renderMultiOptions))) {
    return null;
  }

  if (!isArrayWithLength(selectedOption)) {
    return /*#__PURE__*/React.createElement(Placeholder, null, placeholder);
  }

  if (!isMulti) {
    return /*#__PURE__*/React.createElement(SingleValue, null, renderOptionLabel(selectedOption[0].data));
  }

  return /*#__PURE__*/React.createElement(Fragment, null, renderMultiOptions ? renderMultiOptions({
    selected: selectedOption,
    renderOptionLabel: renderOptionLabel
  }) : selectedOption.map(function (_ref3) {
    var data = _ref3.data,
        value = _ref3.value;
    return /*#__PURE__*/React.createElement(MultiValue, {
      key: value,
      data: data,
      value: value,
      renderOptionLabel: renderOptionLabel,
      isFocused: value === focusedMultiValue,
      removeSelectedOption: removeSelectedOption
    });
  }));
});
Value.displayName = 'Value';

var useDebounce = function useDebounce(value, delay) {
  var _useState = useState(value),
      _useState2 = _slicedToArray(_useState, 2),
      debouncedValue = _useState2[0],
      setDebouncedValue = _useState2[1];

  useEffect(function () {
    if (delay === undefined) return;
    var handler = setTimeout(function () {
      setDebouncedValue(value);
    }, delay);
    return function () {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return delay === undefined ? value : debouncedValue;
};

var MenuPositionEnum;

(function (MenuPositionEnum) {
  MenuPositionEnum["TOP"] = "top";
  MenuPositionEnum["AUTO"] = "auto";
  MenuPositionEnum["BOTTOM"] = "bottom";
})(MenuPositionEnum || (MenuPositionEnum = {}));

var FilterMatchEnum;

(function (FilterMatchEnum) {
  FilterMatchEnum["ANY"] = "any";
  FilterMatchEnum["START"] = "start";
})(FilterMatchEnum || (FilterMatchEnum = {}));

var ValueIndexEnum;

(function (ValueIndexEnum) {
  ValueIndexEnum["NEXT"] = "next";
  ValueIndexEnum["PREVIOUS"] = "prev";
})(ValueIndexEnum || (ValueIndexEnum = {}));

var OptionIndexEnum;

(function (OptionIndexEnum) {
  OptionIndexEnum["UP"] = "up";
  OptionIndexEnum["DOWN"] = "down";
  OptionIndexEnum["LAST"] = "last";
  OptionIndexEnum["FIRST"] = "first";
})(OptionIndexEnum || (OptionIndexEnum = {}));

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var useMenuOptions = function useMenuOptions(options, debouncedInputValue, filterMatchFrom, selectedOption, getOptionValue, getOptionLabel, getIsOptionDisabled, getFilterOptionString, filterIgnoreCase, filterIgnoreAccents, isMulti, hideSelectedOptions, async) {
  var _useState = useState(OPTIONS_DEFAULT),
      _useState2 = _slicedToArray(_useState, 2),
      menuOptions = _useState2[0],
      setMenuOptions = _useState2[1];

  var searchValue = !async ? debouncedInputValue : '';
  var hideSelectedOptionsOrDefault = typeof hideSelectedOptions !== 'boolean' ? !!isMulti : hideSelectedOptions;
  useEffect(function () {
    var normalizedInput = trimAndFormatFilterStr(searchValue, filterIgnoreCase, filterIgnoreAccents);
    var selectedHash = new Set(selectedOption.map(function (_ref) {
      var value = _ref.value;
      return value;
    }));

    var getIsOptionDisabledOrDefault = getIsOptionDisabled || function (data) {
      return !!data.isDisabled;
    };

    var getFilterOptionStringOrDefault = getFilterOptionString || function (option) {
      return typeof option.label === 'string' ? option.label : "".concat(option.label);
    };

    var isOptionFilterMatch = function isOptionFilterMatch(menuOption) {
      var optionStr = getFilterOptionStringOrDefault(menuOption);
      var normalizedOptionLabel = trimAndFormatFilterStr(optionStr, filterIgnoreCase, filterIgnoreAccents);
      return filterMatchFrom === FilterMatchEnum.ANY ? normalizedOptionLabel.indexOf(normalizedInput) > -1 : normalizedOptionLabel.substr(0, normalizedInput.length) === normalizedInput;
    };

    var parseMenuOption = function parseMenuOption(data) {
      var value = getOptionValue(data);
      var label = getOptionLabel(data);

      var menuOption = _objectSpread$1(_objectSpread$1({
        data: data,
        value: value,
        label: label
      }, getIsOptionDisabledOrDefault(data) && {
        isDisabled: true
      }), selectedHash.has(value) && {
        isSelected: true
      });

      if (normalizedInput && !isOptionFilterMatch(menuOption) || hideSelectedOptionsOrDefault && menuOption.isSelected) {
        return;
      }

      return menuOption;
    };

    var menuOptionsOrDefault = options.reduce(function (acc, data) {
      var option = parseMenuOption(data);
      option && acc.push(option);
      return acc;
    }, []);
    setMenuOptions(menuOptionsOrDefault);
  }, [options, selectedOption, searchValue, hideSelectedOptionsOrDefault, filterMatchFrom, filterIgnoreCase, filterIgnoreAccents, getFilterOptionString, getIsOptionDisabled, getOptionValue, getOptionLabel]);
  return menuOptions;
};

var useUpdateEffect = function useUpdateEffect(effect, deps) {
  var isFirstRender = useRef(true);
  useEffect(function () {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else {
      return effect();
    }
  }, deps);
};

var useMenuPositioner = function useMenuPositioner(menuRef, controlRef, menuOpen, menuPosition, menuItemSize, menuHeightDefault, menuOptionsLength, menuScrollDuration, scrollMenuIntoView, onMenuOpen, onMenuClose) {
  var resetMenuHeightRef = useRef(false);
  var isMenuTopPositionRef = useRef(false);

  var _useState = useState(menuHeightDefault),
      _useState2 = _slicedToArray(_useState, 2),
      menuHeight = _useState2[0],
      setMenuHeight = _useState2[1];

  var _useState3 = useState(menuPosition === MenuPositionEnum.TOP),
      _useState4 = _slicedToArray(_useState3, 2),
      isMenuTopPosition = _useState4[0],
      setIsMenuTopPosition = _useState4[1];

  useEffect(function () {
    isMenuTopPositionRef.current = isMenuTopPosition;
  }, [isMenuTopPosition]);
  useEffect(function () {
    var isTopPosition = menuPosition === MenuPositionEnum.TOP || menuPosition === MenuPositionEnum.AUTO && !menuFitsBelowControl(menuRef.current);
    setIsMenuTopPosition(isTopPosition);
  }, [menuRef, menuPosition]);
  useUpdateEffect(function () {
    if (menuOpen) {
      var handleOnMenuOpen = function handleOnMenuOpen(availableSpace) {
        onMenuOpen && onMenuOpen();

        if (availableSpace) {
          resetMenuHeightRef.current = true;
          setMenuHeight(availableSpace);
        }
      };

      !isMenuTopPositionRef.current ? scrollMenuIntoViewOnOpen(menuRef.current, menuScrollDuration, scrollMenuIntoView, handleOnMenuOpen) : handleOnMenuOpen();
    } else {
      onMenuClose && onMenuClose();

      if (resetMenuHeightRef.current) {
        resetMenuHeightRef.current = false;
        setMenuHeight(menuHeightDefault);
      }
    }
  }, [menuRef, menuOpen, onMenuClose, onMenuOpen, menuHeightDefault, scrollMenuIntoView, menuScrollDuration]);
  var menuHeightCalc = Math.min(menuHeight, menuOptionsLength * menuItemSize);
  var menuStyleTop = isMenuTopPosition ? calculateMenuTop(menuHeightCalc, menuRef.current, controlRef.current) : undefined;
  return {
    menuStyleTop: menuStyleTop,
    menuHeightCalc: menuHeightCalc
  };
};

function _templateObject2$3() {
  var data = _taggedTemplateLiteral(["border:0;outline:0;padding:0;cursor:text;background:0;color:inherit;font-size:inherit;font-weight:inherit;font-family:inherit;box-sizing:content-box;:read-only{opacity:0;cursor:default;}:required{", "}", " ", ""]);

  _templateObject2$3 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$4() {
  var data = _taggedTemplateLiteral(["top:0;left:0;height:0;overflow:scroll;white-space:pre;position:absolute;visibility:hidden;font-size:inherit;font-weight:inherit;font-family:inherit;", ""]);

  _templateObject$4 = function _templateObject() {
    return data;
  };

  return data;
}
var INPUT_MIN_WIDTH = 2;
var SizerDiv = styled.div(_templateObject$4(), function (_ref) {
  var theme = _ref.theme;
  return theme.input.css;
});
var Input = styled.input(_templateObject2$3(), function (_ref2) {
  var theme = _ref2.theme,
      isInvalid = _ref2.isInvalid;
  return isInvalid && theme.input.cssRequired;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.input.css;
}, isEdgeOrIE() && '::-ms-clear{display:none;}');
var AutosizeInput = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (_ref4, ref) {
  var id = _ref4.id,
      onBlur = _ref4.onBlur,
      onFocus = _ref4.onFocus,
      readOnly = _ref4.readOnly,
      required = _ref4.required,
      onChange = _ref4.onChange,
      ariaLabel = _ref4.ariaLabel,
      inputValue = _ref4.inputValue,
      addClassNames = _ref4.addClassNames,
      ariaLabelledBy = _ref4.ariaLabelledBy,
      selectedOption = _ref4.selectedOption;
  var sizerRef = useRef(null);

  var _useState = useState(INPUT_MIN_WIDTH),
      _useState2 = _slicedToArray(_useState, 2),
      inputWidth = _useState2[0],
      setInputWidth = _useState2[1];

  useUpdateEffect(function () {
    if (sizerRef.current) {
      setInputWidth(sizerRef.current.scrollWidth + INPUT_MIN_WIDTH);
    }
  }, [inputValue]);
  var isInvalid = required && !isArrayWithLength(selectedOption);
  var autosizeInputAttrs = {
    isInvalid: isInvalid,
    tabIndex: -1,
    type: 'text',
    spellCheck: false,
    autoCorrect: 'off',
    autoComplete: 'off',
    autoCapitalize: 'none',
    'aria-label': ariaLabel,
    'aria-autocomplete': 'list',
    'aria-labelledby': ariaLabelledBy,
    'data-testid': AUTOSIZE_INPUT_TESTID,
    style: {
      width: inputWidth
    }
  };
  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Input, Object.assign({
    id: id,
    ref: ref,
    onBlur: onBlur,
    onFocus: onFocus,
    value: inputValue,
    readOnly: readOnly,
    required: isInvalid
  }, autosizeInputAttrs, {
    onChange: !readOnly ? onChange : undefined,
    className: addClassNames ? AUTOSIZE_INPUT_CLS : undefined
  })), /*#__PURE__*/React.createElement(SizerDiv, {
    ref: sizerRef
  }, inputValue));
}));
AutosizeInput.displayName = 'AutosizeInput';

function _templateObject2$4() {
  var data = _taggedTemplateLiteral(["", ""]);

  _templateObject2$4 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$5() {
  var data = _taggedTemplateLiteral(["display:flex;align-self:center;text-align:center;margin-right:0.25rem;padding:", ";> div{border-radius:100%;display:inline-block;animation:", ";", ":nth-of-type(1){animation-delay:-0.272s;}:nth-of-type(2){animation-delay:-0.136s;}}"]);

  _templateObject$5 = function _templateObject() {
    return data;
  };

  return data;
}
var StyledLoadingDots = styled.div(_templateObject$5(), function (_ref) {
  var theme = _ref.theme;
  return theme.loader.padding;
}, function (_ref2) {
  var theme = _ref2.theme;
  return css(_templateObject2$4(), theme.loader.animation);
}, function (_ref3) {
  var loader = _ref3.theme.loader;
  return "width: ".concat(loader.size, ";height: ").concat(loader.size, ";background-color: ").concat(loader.color, ";");
});

var LoadingDots = function LoadingDots(_ref4) {
  var addClassNames = _ref4.addClassNames;
  return /*#__PURE__*/React.createElement(StyledLoadingDots, {
    "aria-hidden": 'true',
    className: addClassNames ? LOADING_DOTS_CLS : undefined
  }, /*#__PURE__*/React.createElement("div", null), /*#__PURE__*/React.createElement("div", null), /*#__PURE__*/React.createElement("div", null));
};

function _templateObject6() {
  var data = _taggedTemplateLiteral(["width:1px;margin:0.5rem 0;align-self:stretch;box-sizing:border-box;background-color:", ";"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["", " ", ""]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$2() {
  var data = _taggedTemplateLiteral(["", ""]);

  _templateObject4$2 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$2() {
  var data = _taggedTemplateLiteral(["fill:currentColor;animation:", ";", ""]);

  _templateObject3$2 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$5() {
  var data = _taggedTemplateLiteral(["height:100%;display:flex;align-items:center;box-sizing:border-box;", " ", ""]);

  _templateObject2$5 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$6() {
  var data = _taggedTemplateLiteral(["display:flex;flex-shrink:0;align-items:center;align-self:stretch;box-sizing:border-box;"]);

  _templateObject$6 = function _templateObject() {
    return data;
  };

  return data;
}
var IndicatorIconsWrapper = styled.div(_templateObject$6());
var IndicatorIcon = styled.div(_templateObject2$5(), function (_ref) {
  var icon = _ref.theme.icon;
  return "color: ".concat(icon.color, ";padding: ").concat(icon.padding, ";:hover {color: ").concat(icon.hoverColor, ";}");
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.icon.css;
});
var ClearSvg = styled.svg(_templateObject3$2(), function (_ref3) {
  var theme = _ref3.theme;
  return css(_templateObject4$2(), theme.icon.clear.animation);
}, function (_ref4) {
  var clear = _ref4.theme.icon.clear;
  return "width: ".concat(clear.width, ";height: ").concat(clear.height, ";transition: ").concat(clear.transition, ";");
});
var Caret = styled.div(_templateObject5(), function (_ref5) {
  var caret = _ref5.theme.icon.caret;
  return "transition: ".concat(caret.transition, ";border-top: ").concat(caret.size, " dashed;border-left: ").concat(caret.size, " solid transparent;border-right: ").concat(caret.size, " solid transparent;");
}, function (_ref6) {
  var menuOpen = _ref6.menuOpen,
      isInvalid = _ref6.isInvalid,
      color = _ref6.theme.color;
  return menuOpen && "transform: rotate(180deg);color: ".concat(isInvalid ? color.danger : color.caretActive || color.primary, ";");
});
var Separator = styled.div(_templateObject6(), function (_ref7) {
  var theme = _ref7.theme;
  return theme.color.iconSeparator || theme.color.border;
});
var IndicatorIcons = /*#__PURE__*/React.memo(function (_ref8) {
  var menuOpen = _ref8.menuOpen,
      clearIcon = _ref8.clearIcon,
      caretIcon = _ref8.caretIcon,
      isInvalid = _ref8.isInvalid,
      showClear = _ref8.showClear,
      isLoading = _ref8.isLoading,
      isDisabled = _ref8.isDisabled,
      loadingNode = _ref8.loadingNode,
      addClassNames = _ref8.addClassNames,
      onCaretMouseDown = _ref8.onCaretMouseDown,
      onClearMouseDown = _ref8.onClearMouseDown;
  var forwardState = typeof caretIcon === 'function' || typeof clearIcon === 'function' ? {
    menuOpen: menuOpen,
    isLoading: !!isLoading,
    isInvalid: !!isInvalid,
    isDisabled: !!isDisabled
  } : undefined;

  var iconRenderer = function iconRenderer(renderer) {
    return typeof renderer === 'function' ? renderer(forwardState) : renderer;
  };

  return /*#__PURE__*/React.createElement(IndicatorIconsWrapper, null, showClear && !isLoading && /*#__PURE__*/React.createElement(IndicatorIcon, {
    onTouchEnd: onClearMouseDown,
    onMouseDown: onClearMouseDown,
    "data-testid": CLEAR_ICON_TESTID
  }, iconRenderer(clearIcon) || /*#__PURE__*/React.createElement(ClearSvg, {
    "aria-hidden": 'true',
    viewBox: '0 0 14 16',
    className: addClassNames ? CLEAR_ICON_CLS : undefined
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: 'evenodd',
    d: 'M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z'
  }))), isLoading && (loadingNode || /*#__PURE__*/React.createElement(LoadingDots, {
    addClassNames: addClassNames
  })), /*#__PURE__*/React.createElement(Separator, null), /*#__PURE__*/React.createElement(IndicatorIcon, {
    onTouchEnd: onCaretMouseDown,
    onMouseDown: onCaretMouseDown,
    "data-testid": CARET_ICON_TESTID
  }, iconRenderer(caretIcon) || /*#__PURE__*/React.createElement(Caret, {
    "aria-hidden": 'true',
    menuOpen: menuOpen,
    isInvalid: isInvalid,
    className: addClassNames ? CARET_ICON_CLS : undefined
  })));
});
IndicatorIcons.displayName = 'IndicatorIcons';

function _templateObject$7() {
  var data = _taggedTemplateLiteral(["border:0;padding:0;width:1px;height:1px;margin:-1px;overflow:hidden;position:absolute;white-space:nowrap;clip:rect(0 0 0 0);clip-path:inset(50%);"]);

  _templateObject$7 = function _templateObject() {
    return data;
  };

  return data;
}
var A11yText = styled.span(_templateObject$7());

var AriaLiveRegion = function AriaLiveRegion(_ref) {
  var menuOpen = _ref.menuOpen,
      isFocused = _ref.isFocused,
      ariaLabel = _ref.ariaLabel,
      inputValue = _ref.inputValue,
      optionCount = _ref.optionCount,
      isSearchable = _ref.isSearchable,
      focusedOption = _ref.focusedOption,
      selectedOption = _ref.selectedOption;
  if (!isFocused) return null;
  var focusedOptionValue = focusedOption.value,
      focusedOptionLabel = focusedOption.label,
      focusedOptionIndex = focusedOption.index,
      isFocusedOptionDisabled = focusedOption.isDisabled;
  var selectedOptionLabel = isArrayWithLength(selectedOption) ? selectedOption.map(function (_ref2) {
    var label = _ref2.label;
    return label;
  }).join(' ') : 'N/A';
  var optionsMsg = "".concat(optionCount, " result(s) available").concat(inputValue ? " for search input ".concat(inputValue) : '', ".");
  var focusedMsg = focusedOptionValue ? "Focused option: ".concat(focusedOptionLabel).concat(isFocusedOptionDisabled ? ' - disabled' : '', ", ").concat(focusedOptionIndex + 1, " of ").concat(optionCount, ".") : '';
  var menuMsg = menuOpen ? 'Use Up and Down arrow keys to choose options, press Enter or Tab to select the currently focused option, press Escape to close the menu.' : "".concat(ariaLabel || 'Select', " is focused").concat(isSearchable ? ', type to filter options' : '', ", press Down arrow key to open the menu.");
  var selectedOptionMsg = "Selected option: ".concat(selectedOptionLabel);
  var extendedFeedbackMsg = "".concat(focusedMsg, " ").concat(optionsMsg, " ").concat(menuMsg);
  return /*#__PURE__*/React.createElement(A11yText, {
    "aria-live": 'polite',
    "data-testid": ARIA_LIVE_TESTID
  }, /*#__PURE__*/React.createElement("span", null, "\xA0", selectedOptionMsg), /*#__PURE__*/React.createElement("span", null, "\xA0", extendedFeedbackMsg));
};

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _templateObject5$1() {
  var data = _taggedTemplateLiteral(["", ""]);

  _templateObject5$1 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$3() {
  var data = _taggedTemplateLiteral(["z-index:999;cursor:default;position:absolute;", " animation:", ";", " .", "{display:block;overflow:hidden;user-select:none;white-space:nowrap;text-overflow:ellipsis;-webkit-tap-highlight-color:transparent;", "}"]);

  _templateObject4$3 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$3() {
  var data = _taggedTemplateLiteral(["outline:0;display:flex;flex-wrap:wrap;cursor:default;position:relative;align-items:center;box-sizing:border-box;justify-content:space-between;", " ", " ", ""]);

  _templateObject3$3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$6() {
  var data = _taggedTemplateLiteral(["flex:1 1 0%;display:flex;flex-wrap:wrap;overflow:hidden;position:relative;align-items:center;box-sizing:border-box;padding:", ";"]);

  _templateObject2$6 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$8() {
  var data = _taggedTemplateLiteral(["position:relative;box-sizing:border-box;", ""]);

  _templateObject$8 = function _templateObject() {
    return data;
  };

  return data;
}
var SelectWrapper = styled.div(_templateObject$8(), function (_ref) {
  var theme = _ref.theme;
  return theme.select.css;
});
var ValueWrapper = styled.div(_templateObject2$6(), function (_ref2) {
  var theme = _ref2.theme;
  return theme.control.padding;
});
var ControlWrapper = styled.div(_templateObject3$3(), function (_ref3) {
  var isDisabled = _ref3.isDisabled,
      isFocused = _ref3.isFocused,
      isInvalid = _ref3.isInvalid,
      _ref3$theme = _ref3.theme,
      control = _ref3$theme.control,
      color = _ref3$theme.color;
  return "transition: ".concat(control.transition, ";border-style: ").concat(control.borderStyle, ";border-width: ").concat(control.borderWidth, ";border-radius: ").concat(control.borderRadius, ";min-height: ").concat(control.height || control.minHeight, ";border-color: ").concat(isInvalid ? color.danger : isFocused ? control.focusedBorderColor : color.border, ";").concat(isDisabled ? 'pointer-events: none;' : '', "").concat(control.height ? "height: ".concat(control.height, ";") : '', "").concat(control.backgroundColor || isDisabled ? "background-color: ".concat(isDisabled ? color.disabled : control.backgroundColor, ";") : '', "").concat(isFocused ? "box-shadow: ".concat(control.boxShadow, " ").concat(isInvalid ? color.dangerLight : control.boxShadowColor, ";") : '', "");
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.control.css;
}, function (_ref5) {
  var isFocused = _ref5.isFocused,
      theme = _ref5.theme;
  return isFocused && theme.control.focusedCss;
});
var MenuWrapper = styled.div(_templateObject4$3(), function (_ref6) {
  var menuTop = _ref6.menuTop,
      hideMenu = _ref6.hideMenu,
      menu = _ref6.theme.menu;
  return "width: ".concat(menu.width, ";margin: ").concat(menu.margin, ";padding: ").concat(menu.padding, ";box-shadow: ").concat(menu.boxShadow, ";border-radius: ").concat(menu.borderRadius, ";background-color: ").concat(menu.backgroundColor, ";").concat(hideMenu ? 'display: none;' : '', "").concat(menuTop ? "top: ".concat(menuTop, ";") : '', "");
}, function (_ref7) {
  var theme = _ref7.theme;
  return css(_templateObject5$1(), theme.menu.animation);
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.menu.css;
}, OPTION_CLS, function (_ref9) {
  var option = _ref9.theme.menu.option;
  return "padding: ".concat(option.padding, ";text-align: ").concat(option.textAlign, ";&.").concat(OPTION_FOCUSED_CLS, ",&:hover:not(.").concat(OPTION_DISABLED_CLS, "):not(.").concat(OPTION_SELECTED_CLS, ") {background-color: ").concat(option.focusedBgColor, ";}&.").concat(OPTION_SELECTED_CLS, " {color: ").concat(option.selectedColor, ";background-color: ").concat(option.selectedBgColor, ";}&.").concat(OPTION_DISABLED_CLS, " {opacity: 0.35;}");
});
var Select = /*#__PURE__*/React.forwardRef(function (_ref10, ref) {
  var async = _ref10.async,
      isMulti = _ref10.isMulti,
      inputId = _ref10.inputId,
      selectId = _ref10.selectId,
      required = _ref10.required,
      autoFocus = _ref10.autoFocus,
      isLoading = _ref10.isLoading,
      onKeyDown = _ref10.onKeyDown,
      clearIcon = _ref10.clearIcon,
      caretIcon = _ref10.caretIcon,
      isInvalid = _ref10.isInvalid,
      ariaLabel = _ref10.ariaLabel,
      menuWidth = _ref10.menuWidth,
      isDisabled = _ref10.isDisabled,
      inputDelay = _ref10.inputDelay,
      onMenuOpen = _ref10.onMenuOpen,
      onMenuClose = _ref10.onMenuClose,
      onInputBlur = _ref10.onInputBlur,
      isClearable = _ref10.isClearable,
      themeConfig = _ref10.themeConfig,
      loadingNode = _ref10.loadingNode,
      initialValue = _ref10.initialValue,
      onInputFocus = _ref10.onInputFocus,
      onInputChange = _ref10.onInputChange,
      addClassNames = _ref10.addClassNames,
      ariaLabelledBy = _ref10.ariaLabelledBy,
      onOptionChange = _ref10.onOptionChange,
      onSearchChange = _ref10.onSearchChange,
      getOptionLabel = _ref10.getOptionLabel,
      getOptionValue = _ref10.getOptionValue,
      itemKeySelector = _ref10.itemKeySelector,
      openMenuOnFocus = _ref10.openMenuOnFocus,
      isAriaLiveEnabled = _ref10.isAriaLiveEnabled,
      menuOverscanCount = _ref10.menuOverscanCount,
      blurInputOnSelect = _ref10.blurInputOnSelect,
      renderOptionLabel = _ref10.renderOptionLabel,
      renderMultiOptions = _ref10.renderMultiOptions,
      menuScrollDuration = _ref10.menuScrollDuration,
      filterIgnoreAccents = _ref10.filterIgnoreAccents,
      hideSelectedOptions = _ref10.hideSelectedOptions,
      getIsOptionDisabled = _ref10.getIsOptionDisabled,
      getFilterOptionString = _ref10.getFilterOptionString,
      _ref10$isSearchable = _ref10.isSearchable,
      isSearchable = _ref10$isSearchable === void 0 ? true : _ref10$isSearchable,
      _ref10$openMenuOnClic = _ref10.openMenuOnClick,
      openMenuOnClick = _ref10$openMenuOnClic === void 0 ? true : _ref10$openMenuOnClic,
      _ref10$filterIgnoreCa = _ref10.filterIgnoreCase,
      filterIgnoreCase = _ref10$filterIgnoreCa === void 0 ? true : _ref10$filterIgnoreCa,
      _ref10$tabSelectsOpti = _ref10.tabSelectsOption,
      tabSelectsOption = _ref10$tabSelectsOpti === void 0 ? true : _ref10$tabSelectsOpti,
      _ref10$closeMenuOnSel = _ref10.closeMenuOnSelect,
      closeMenuOnSelect = _ref10$closeMenuOnSel === void 0 ? true : _ref10$closeMenuOnSel,
      _ref10$scrollMenuInto = _ref10.scrollMenuIntoView,
      scrollMenuIntoView = _ref10$scrollMenuInto === void 0 ? true : _ref10$scrollMenuInto,
      _ref10$backspaceClear = _ref10.backspaceClearsValue,
      backspaceClearsValue = _ref10$backspaceClear === void 0 ? true : _ref10$backspaceClear,
      _ref10$filterMatchFro = _ref10.filterMatchFrom,
      filterMatchFrom = _ref10$filterMatchFro === void 0 ? FilterMatchEnum.ANY : _ref10$filterMatchFro,
      _ref10$menuPosition = _ref10.menuPosition,
      menuPosition = _ref10$menuPosition === void 0 ? MenuPositionEnum.BOTTOM : _ref10$menuPosition,
      _ref10$options = _ref10.options,
      options = _ref10$options === void 0 ? OPTIONS_DEFAULT : _ref10$options,
      _ref10$loadingMsg = _ref10.loadingMsg,
      loadingMsg = _ref10$loadingMsg === void 0 ? LOADING_MSG_DEFAULT : _ref10$loadingMsg,
      _ref10$placeholder = _ref10.placeholder,
      placeholder = _ref10$placeholder === void 0 ? PLACEHOLDER_DEFAULT : _ref10$placeholder,
      _ref10$noOptionsMsg = _ref10.noOptionsMsg,
      noOptionsMsg = _ref10$noOptionsMsg === void 0 ? NO_OPTIONS_MSG_DEFAULT : _ref10$noOptionsMsg,
      _ref10$menuItemSize = _ref10.menuItemSize,
      menuItemSize = _ref10$menuItemSize === void 0 ? MENU_ITEM_SIZE_DEFAULT : _ref10$menuItemSize,
      _ref10$menuMaxHeight = _ref10.menuMaxHeight,
      menuMaxHeight = _ref10$menuMaxHeight === void 0 ? MENU_MAX_HEIGHT_DEFAULT : _ref10$menuMaxHeight;
  var menuOpenRef = useRef(false);
  var prevMenuOptionsLength = useRef();
  var onChangeEventValue = useRef(false);
  var listRef = useRef(null);
  var menuRef = useRef(null);
  var inputRef = useRef(null);
  var controlRef = useRef(null);

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      menuOpen = _useState4[0],
      setMenuOpen = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      isFocused = _useState6[0],
      setIsFocused = _useState6[1];

  var _useState7 = useState(FOCUSED_OPTION_DEFAULT),
      _useState8 = _slicedToArray(_useState7, 2),
      focusedOption = _useState8[0],
      setFocusedOption = _useState8[1];

  var _useState9 = useState(FOCUSED_MULTI_DEFAULT),
      _useState10 = _slicedToArray(_useState9, 2),
      focusedMultiValue = _useState10[0],
      setFocusedMultiValue = _useState10[1];

  var theme = useMemo(function () {
    return isPlainObject(themeConfig) ? mergeDeep(RfsTheme, themeConfig) : RfsTheme;
  }, [themeConfig]);
  var getOptionLabelFn = useMemo(function () {
    return getOptionLabel || function (data) {
      return data.label;
    };
  }, [getOptionLabel]);
  var getOptionValueFn = useMemo(function () {
    return getOptionValue || function (data) {
      return data.value;
    };
  }, [getOptionValue]);
  var renderOptionLabelFn = useMemo(function () {
    return renderOptionLabel || getOptionLabelFn;
  }, [renderOptionLabel, getOptionLabelFn]);
  var debouncedInputValue = useDebounce(inputValue, inputDelay);

  var _useState11 = useState(function () {
    return normalizeValue(initialValue, getOptionValueFn, getOptionLabelFn);
  }),
      _useState12 = _slicedToArray(_useState11, 2),
      selectedOption = _useState12[0],
      setSelectedOption = _useState12[1];

  var menuOptions = useMenuOptions(options, debouncedInputValue, filterMatchFrom, selectedOption, getOptionValueFn, getOptionLabelFn, getIsOptionDisabled, getFilterOptionString, filterIgnoreCase, filterIgnoreAccents, isMulti, hideSelectedOptions, async);

  var _useMenuPositioner = useMenuPositioner(menuRef, controlRef, menuOpen, menuPosition, menuItemSize, menuMaxHeight, menuOptions.length, menuScrollDuration, scrollMenuIntoView, onMenuOpen, onMenuClose),
      menuStyleTop = _useMenuPositioner.menuStyleTop,
      menuHeightCalc = _useMenuPositioner.menuHeightCalc;

  var blurInput = function blurInput() {
    inputRef.current && inputRef.current.blur();
  };

  var focusInput = function focusInput() {
    inputRef.current && inputRef.current.focus();
  };

  var scrollToItemIndex = function scrollToItemIndex(index) {
    listRef.current && listRef.current.scrollToItem(index);
  };

  var removeSelectedOption = useCallback(function (removeValue, e) {
    if (e) {
      e.stopPropagation();
      e.type === 'mousedown' && e.preventDefault();
    }

    setSelectedOption(function (prevSelectedOption) {
      return prevSelectedOption.filter(function (_ref11) {
        var value = _ref11.value;
        return value !== removeValue;
      });
    });
  }, []);
  var openMenuAndFocusOption = useCallback(function (position) {
    if (!isArrayWithLength(menuOptions)) {
      setMenuOpen(true);
      return;
    }

    var selectedIndex = !isMulti ? menuOptions.findIndex(function (_ref12) {
      var isSelected = _ref12.isSelected;
      return isSelected;
    }) : -1;
    var index = selectedIndex > -1 ? selectedIndex : position === OptionIndexEnum.FIRST ? 0 : menuOptions.length - 1;
    setMenuOpen(true);
    setFocusedOption(_objectSpread$2({
      index: index
    }, menuOptions[index]));
    scrollToItemIndex(index);
  }, [isMulti, menuOptions]);
  var selectOption = useCallback(function (option, isSelected) {
    if (isSelected) {
      isMulti && removeSelectedOption(option.value);
    } else {
      setSelectedOption(function (prevSelectedOption) {
        return !isMulti ? [option] : [].concat(_toConsumableArray(prevSelectedOption), [option]);
      });
    }

    var blurControl = typeof blurInputOnSelect === 'boolean' ? blurInputOnSelect : isTouchDevice();

    if (blurControl) {
      blurInput();
    } else if (closeMenuOnSelect) {
      setMenuOpen(false);
      setInputValue('');
    }
  }, [isMulti, closeMenuOnSelect, removeSelectedOption, blurInputOnSelect]);
  useImperativeHandle(ref, function () {
    return {
      blur: blurInput,
      focus: focusInput,
      clearValue: function clearValue() {
        setSelectedOption(SELECTED_OPTION_DEFAULT);
        setFocusedOption(FOCUSED_OPTION_DEFAULT);
      },
      setValue: function setValue(option) {
        var normalizedOptions = normalizeValue(option, getOptionValueFn, getOptionLabelFn);
        setSelectedOption(normalizedOptions);
      },
      toggleMenu: function toggleMenu(state) {
        if (state === true || state === undefined && !menuOpen) {
          !isFocused && focusInput();
          openMenuAndFocusOption(OptionIndexEnum.FIRST);
        } else {
          blurInput();
        }
      }
    };
  });
  useEffect(function () {
    autoFocus && focusInput();
  }, [autoFocus]);
  useEffect(function () {
    menuOpenRef.current = menuOpen;
  }, [menuOpen]);
  useEffect(function () {
    if (isFocused && openMenuOnFocus) {
      openMenuAndFocusOption(OptionIndexEnum.FIRST);
    }
  }, [isFocused, openMenuOnFocus, openMenuAndFocusOption]);
  useEffect(function () {
    if (onSearchChange && onChangeEventValue.current) {
      onChangeEventValue.current = false;
      onSearchChange(debouncedInputValue);
    }
  }, [onSearchChange, debouncedInputValue]);
  useUpdateEffect(function () {
    if (!onOptionChange) return;
    var normalizedOptionValue = isMulti ? selectedOption.map(function (_ref13) {
      var data = _ref13.data;
      return data;
    }) : isArrayWithLength(selectedOption) ? selectedOption[0].data : ON_CHANGE_SINGLE_VALUE_DEFAULT;
    onOptionChange(normalizedOptionValue);
  }, [isMulti, selectedOption, onOptionChange]);
  useUpdateEffect(function () {
    var length = menuOptions.length;
    var inputChanged = length > 0 && (async || length !== options.length || prevMenuOptionsLength.current === 0);

    if (length === 0) {
      setFocusedOption(FOCUSED_OPTION_DEFAULT);
    } else if (length === 1 || inputChanged) {
      setFocusedOption(_objectSpread$2({
        index: 0
      }, menuOptions[0]));
      scrollToItemIndex(0);
    }

    prevMenuOptionsLength.current = length;
  }, [async, options, menuOptions]);

  var selectOptionFromFocused = function selectOptionFromFocused() {
    var data = focusedOption.data,
        value = focusedOption.value,
        label = focusedOption.label,
        isSelected = focusedOption.isSelected,
        isOptionDisabled = focusedOption.isDisabled;

    if (data && !isOptionDisabled) {
      selectOption({
        data: data,
        value: value,
        label: label
      }, isSelected);
    }
  };

  var focusValueOnArrowKey = function focusValueOnArrowKey(direction) {
    if (!isArrayWithLength(selectedOption)) return;
    var nextFocusedIndex = -1;
    var lastValueIndex = selectedOption.length - 1;
    var curFocusedIndex = focusedMultiValue ? selectedOption.findIndex(function (_ref14) {
      var value = _ref14.value;
      return value === focusedMultiValue;
    }) : -1;

    switch (direction) {
      case ValueIndexEnum.NEXT:
        nextFocusedIndex = curFocusedIndex > -1 && curFocusedIndex < lastValueIndex ? curFocusedIndex + 1 : -1;
        break;

      case ValueIndexEnum.PREVIOUS:
        nextFocusedIndex = curFocusedIndex !== 0 ? curFocusedIndex === -1 ? lastValueIndex : curFocusedIndex - 1 : 0;
        break;
    }

    var nextFocusedVal = nextFocusedIndex >= 0 ? selectedOption[nextFocusedIndex].value : FOCUSED_MULTI_DEFAULT;
    if (focusedOption.data) setFocusedOption(FOCUSED_OPTION_DEFAULT);
    if (nextFocusedVal !== focusedMultiValue) setFocusedMultiValue(nextFocusedVal);
  };

  var focusOptionOnArrowKey = function focusOptionOnArrowKey(direction) {
    if (!isArrayWithLength(menuOptions)) return;
    var index = direction === OptionIndexEnum.DOWN ? (focusedOption.index + 1) % menuOptions.length : focusedOption.index > 0 ? focusedOption.index - 1 : menuOptions.length - 1;
    focusedMultiValue && setFocusedMultiValue(FOCUSED_MULTI_DEFAULT);
    setFocusedOption(_objectSpread$2({
      index: index
    }, menuOptions[index]));
    scrollToItemIndex(index);
  };

  var handleOnKeyDown = function handleOnKeyDown(e) {
    if (isDisabled) return;

    if (onKeyDown) {
      onKeyDown(e, inputValue, focusedOption);
      if (e.defaultPrevented) return;
    }

    switch (e.key) {
      case 'ArrowDown':
        menuOpen ? focusOptionOnArrowKey(OptionIndexEnum.DOWN) : openMenuAndFocusOption(OptionIndexEnum.FIRST);
        break;

      case 'ArrowUp':
        menuOpen ? focusOptionOnArrowKey(OptionIndexEnum.UP) : openMenuAndFocusOption(OptionIndexEnum.LAST);
        break;

      case 'ArrowLeft':
        if (!isMulti || inputValue || renderMultiOptions) return;
        focusValueOnArrowKey(ValueIndexEnum.PREVIOUS);
        break;

      case 'ArrowRight':
        if (!isMulti || inputValue || renderMultiOptions) return;
        focusValueOnArrowKey(ValueIndexEnum.NEXT);
        break;

      case ' ':
        if (inputValue) {
          return;
        } else if (!menuOpen) {
          openMenuAndFocusOption(OptionIndexEnum.FIRST);
          break;
        } else if (!focusedOption.data) {
          return;
        }

        selectOptionFromFocused();
        break;

      case 'Enter':
        if (menuOpen && e.keyCode !== 229) {
          selectOptionFromFocused();
        }

        break;

      case 'Escape':
        if (menuOpen) {
          setMenuOpen(false);
          setInputValue('');
        }

        break;

      case 'Tab':
        if (!menuOpen || !tabSelectsOption || !focusedOption.data || e.shiftKey) {
          return;
        }

        selectOptionFromFocused();
        break;

      case 'Delete':
      case 'Backspace':
        if (inputValue) return;

        if (focusedMultiValue) {
          var clearFocusedIndex = selectedOption.findIndex(function (_ref15) {
            var value = _ref15.value;
            return value === focusedMultiValue;
          });
          var nexFocusedMultiValue = clearFocusedIndex > -1 && clearFocusedIndex < selectedOption.length - 1 ? selectedOption[clearFocusedIndex + 1].value : FOCUSED_MULTI_DEFAULT;
          removeSelectedOption(focusedMultiValue);
          setFocusedMultiValue(nexFocusedMultiValue);
        } else {
          if (!backspaceClearsValue) return;

          if (isArrayWithLength(selectedOption)) {
            if (isMulti && !renderMultiOptions) {
              var value = selectedOption[selectedOption.length - 1].value;
              removeSelectedOption(value);
            } else if (isClearable) {
              setSelectedOption(SELECTED_OPTION_DEFAULT);
            }
          }
        }

        break;

      default:
        return;
    }

    e.preventDefault();
  };

  var handleOnControlMouseDown = function handleOnControlMouseDown(e) {
    if (isDisabled) return;
    if (!isFocused) focusInput();

    if (!menuOpen) {
      openMenuOnClick && openMenuAndFocusOption(OptionIndexEnum.FIRST);
    } else if (e.currentTarget.tagName !== 'INPUT') {
      setMenuOpen(false);
      inputValue && setInputValue('');
    }

    if (e.currentTarget.tagName !== 'INPUT') {
      e.preventDefault();
    }
  };

  var handleOnMenuMouseDown = function handleOnMenuMouseDown(e) {
    e.stopPropagation();
    e.preventDefault();
    focusInput();
  };

  var handleOnInputBlur = useCallback(function (e) {
    onInputBlur && onInputBlur(e);
    setIsFocused(false);
    setMenuOpen(false);
    setInputValue('');
  }, [onInputBlur]);
  var handleOnInputFocus = useCallback(function (e) {
    onInputFocus && onInputFocus(e);
    setIsFocused(true);
  }, [onInputFocus]);
  var handleOnInputChange = useCallback(function (e) {
    onChangeEventValue.current = true;
    onInputChange && onInputChange(e.currentTarget.value || '');
    !menuOpenRef.current && setMenuOpen(true);
    setInputValue(e.currentTarget.value || '');
  }, [onInputChange]);
  var handleOnClearMouseDown = useCallback(function (e) {
    e.stopPropagation();
    e.type === 'mousedown' && e.preventDefault();
    setSelectedOption(SELECTED_OPTION_DEFAULT);
    focusInput();
  }, []);
  var handleOnCaretMouseDown = useCallback(function (e) {
    e.stopPropagation();
    e.type === 'mousedown' && e.preventDefault();
    focusInput();
    menuOpen ? setMenuOpen(false) : openMenuAndFocusOption(OptionIndexEnum.FIRST);
  }, [menuOpen, openMenuAndFocusOption]);
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(SelectWrapper, {
    id: selectId,
    role: 'combobox',
    "aria-haspopup": 'listbox',
    "aria-controls": inputId,
    onKeyDown: handleOnKeyDown,
    "data-testid": SELECT_CONTAINER_TESTID,
    "aria-expanded": menuOpen ? 'true' : 'false',
    className: addClassNames ? SELECT_CONTAINER_CLS : undefined
  }, /*#__PURE__*/React.createElement(ControlWrapper, {
    ref: controlRef,
    isInvalid: isInvalid,
    isFocused: isFocused,
    isDisabled: isDisabled,
    onTouchEnd: handleOnControlMouseDown,
    onMouseDown: handleOnControlMouseDown,
    "data-testid": CONTROL_CONTAINER_TESTID,
    className: addClassNames ? CONTROL_CONTAINER_CLS : undefined
  }, /*#__PURE__*/React.createElement(ValueWrapper, null, /*#__PURE__*/React.createElement(Value, {
    isMulti: isMulti,
    inputValue: inputValue,
    placeholder: placeholder,
    selectedOption: selectedOption,
    focusedMultiValue: focusedMultiValue,
    renderOptionLabel: renderOptionLabelFn,
    renderMultiOptions: renderMultiOptions,
    removeSelectedOption: removeSelectedOption
  }), /*#__PURE__*/React.createElement(AutosizeInput, {
    id: inputId,
    ref: inputRef,
    required: required,
    ariaLabel: ariaLabel,
    inputValue: inputValue,
    onBlur: handleOnInputBlur,
    onFocus: handleOnInputFocus,
    addClassNames: addClassNames,
    onChange: handleOnInputChange,
    ariaLabelledBy: ariaLabelledBy,
    selectedOption: selectedOption,
    readOnly: isDisabled || !isSearchable || !!focusedMultiValue
  })), /*#__PURE__*/React.createElement(IndicatorIcons, {
    menuOpen: menuOpen,
    clearIcon: clearIcon,
    caretIcon: caretIcon,
    isInvalid: isInvalid,
    isLoading: isLoading,
    isDisabled: isDisabled,
    loadingNode: loadingNode,
    addClassNames: addClassNames,
    onClearMouseDown: handleOnClearMouseDown,
    showClear: !!(isClearable && !isDisabled && isArrayWithLength(selectedOption)),
    onCaretMouseDown: !isDisabled && !openMenuOnClick ? handleOnCaretMouseDown : undefined
  })), /*#__PURE__*/React.createElement(MenuWrapper, {
    ref: menuRef,
    hideMenu: !menuOpen,
    menuTop: menuStyleTop,
    onMouseDown: handleOnMenuMouseDown,
    "data-testid": MENU_CONTAINER_TESTID,
    className: addClassNames ? MENU_CONTAINER_CLS : undefined
  }, /*#__PURE__*/React.createElement(Menu, {
    ref: listRef,
    isLoading: isLoading,
    height: menuHeightCalc,
    itemSize: menuItemSize,
    loadingMsg: loadingMsg,
    menuOptions: menuOptions,
    noOptionsMsg: noOptionsMsg,
    selectOption: selectOption,
    itemKeySelector: itemKeySelector,
    overscanCount: menuOverscanCount,
    width: menuWidth || theme.menu.width,
    renderOptionLabel: renderOptionLabelFn,
    focusedOptionIndex: focusedOption.index
  })), isAriaLiveEnabled && /*#__PURE__*/React.createElement(AriaLiveRegion, {
    menuOpen: menuOpen,
    isFocused: isFocused,
    ariaLabel: ariaLabel,
    inputValue: inputValue,
    isSearchable: isSearchable,
    focusedOption: focusedOption,
    selectedOption: selectedOption,
    optionCount: menuOptions.length
  })));
});
Select.displayName = 'Select';

export { FilterMatchEnum, MenuPositionEnum, Select };
