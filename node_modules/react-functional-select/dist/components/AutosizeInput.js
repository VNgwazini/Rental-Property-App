import React, { forwardRef, memo, useState, useRef, Fragment } from 'react';
import styled from 'styled-components';
import { useUpdateEffect } from '../hooks';
import { INPUT_MIN_WIDTH_PX } from '../constants/defaults';
import { isArrayWithLength, isMicrosoftBrowser } from '../utils';
import { AUTOSIZE_INPUT_CLS, AUTOSIZE_INPUT_TESTID } from '../constants/dom';
const SizerDiv = styled.div `
  top: 0;
  left: 0;
  height: 0;
  overflow: scroll;
  white-space: pre;
  position: absolute;
  visibility: hidden;
  font-size: inherit;
  font-weight: inherit;
  font-family: inherit;
  ${({ theme }) => theme.input.css}
`;
const Input = styled.input `
  border: 0;
  outline: 0;
  padding: 0;
  cursor: text;
  background: 0;
  color: inherit;
  font-size: inherit;
  font-weight: inherit;
  font-family: inherit;
  box-sizing: content-box;

  :read-only {
    opacity: 0;
    cursor: default;
  }

  :required {
    ${({ theme, isInvalid }) => isInvalid && theme.input.cssRequired}
  }

  ${({ theme }) => theme.input.css}
  ${isMicrosoftBrowser() && '::-ms-clear{display:none;}'}
`;
const AutosizeInput = memo(forwardRef(({ id, onBlur, onFocus, readOnly, required, onChange, ariaLabel, inputValue, addClassNames, ariaLabelledBy, selectedOption }, ref) => {
    const sizerRef = useRef(null);
    const [inputWidth, setInputWidth] = useState(INPUT_MIN_WIDTH_PX);
    const isInvalid = required && !isArrayWithLength(selectedOption);
    const autosizeInputAttrs = {
        isInvalid,
        tabIndex: 0,
        type: 'text',
        spellCheck: false,
        autoCorrect: 'off',
        autoComplete: 'off',
        autoCapitalize: 'none',
        'aria-label': ariaLabel,
        'aria-autocomplete': 'list',
        'aria-labelledby': ariaLabelledBy,
        'data-testid': AUTOSIZE_INPUT_TESTID,
        style: { width: inputWidth }
    };
    useUpdateEffect(() => {
        if (sizerRef.current) {
            setInputWidth(sizerRef.current.scrollWidth + INPUT_MIN_WIDTH_PX);
        }
    }, [inputValue]);
    return (React.createElement(Fragment, null,
        React.createElement(Input, Object.assign({ id: id, ref: ref, onBlur: onBlur, onFocus: onFocus, value: inputValue, readOnly: readOnly, required: isInvalid }, autosizeInputAttrs, { onChange: !readOnly ? onChange : undefined, className: addClassNames ? AUTOSIZE_INPUT_CLS : undefined })),
        React.createElement(SizerDiv, { ref: sizerRef }, inputValue)));
}));
AutosizeInput.displayName = 'AutosizeInput';
export default AutosizeInput;
