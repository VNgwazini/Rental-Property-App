import React, { Fragment } from 'react';
import MultiValue from './MultiValue';
import styled from 'styled-components';
import { isArrayWithLength } from '../utils';
const SingleValue = styled.div `
  top: 50%;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  box-sizing: border-box;
  text-overflow: ellipsis;
  transform: translateY(-50%);
  max-width: calc(100% - 0.5rem);
`;
const Placeholder = styled.div `
  top: 50%;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  box-sizing: border-box;
  text-overflow: ellipsis;
  transform: translateY(-50%);
  color: ${({ theme }) => theme.color.placeholder};
`;
const Value = React.memo(({ isMulti, inputValue, placeholder, selectedOption, focusedMultiValue, renderOptionLabel, renderMultiOptions, removeSelectedOption }) => {
    if (inputValue &&
        (!isMulti || (isMulti && (!isArrayWithLength(selectedOption) || renderMultiOptions)))) {
        return null;
    }
    if (!isArrayWithLength(selectedOption)) {
        return React.createElement(Placeholder, null, placeholder);
    }
    if (!isMulti) {
        return (React.createElement(SingleValue, null, renderOptionLabel(selectedOption[0].data)));
    }
    return (React.createElement(Fragment, null, renderMultiOptions
        ? renderMultiOptions({ selected: selectedOption, renderOptionLabel })
        : selectedOption.map(({ data, value }) => (React.createElement(MultiValue, { key: value, data: data, value: value, renderOptionLabel: renderOptionLabel, isFocused: value === focusedMultiValue, removeSelectedOption: removeSelectedOption })))));
});
Value.displayName = 'Value';
export default Value;
