import React, { memo } from 'react';
import LoadingDots from './LoadingDots';
import styled, { css } from 'styled-components';
import { CLEAR_ICON_CLS, CARET_ICON_CLS, CLEAR_ICON_TESTID, CARET_ICON_TESTID } from '../constants/dom';
const IndicatorIconsWrapper = styled.div `
  display: flex;
  flex-shrink: 0;
  align-items: center;
  align-self: stretch;
  box-sizing: border-box;
`;
const IndicatorIcon = styled.div `
  height: 100%;
  display: flex;
  align-items: center;
  box-sizing: border-box;
  color: ${({ theme }) => theme.icon.color};
  padding: ${({ theme }) => theme.icon.padding};

  :hover {
    color: ${({ theme }) => theme.icon.hoverColor};
  }

  ${({ theme }) => theme.icon.css}
`;
const ClearSvg = styled.svg `
  fill: currentColor;
  ${({ theme: { icon: { clear } } }) => css `
    width: ${clear.width};
    height: ${clear.height};
    animation: ${clear.animation};
    transition: ${clear.transition};
  `}
`;
const Caret = styled.div `
  transition: ${({ theme }) => theme.icon.caret.transition};
  border-top: ${({ theme }) => theme.icon.caret.size} dashed;
  border-left: ${({ theme }) => theme.icon.caret.size} solid transparent;
  border-right: ${({ theme }) => theme.icon.caret.size} solid transparent;

  ${({ menuOpen, isInvalid, theme: { color } }) => menuOpen &&
    css `
      transform: rotate(180deg);
      color: ${isInvalid ? color.danger : color.caretActive || color.primary};
    `}
`;
const Separator = styled.div `
  width: 1px;
  margin: 0.5rem 0;
  align-self: stretch;
  box-sizing: border-box;
  background-color: ${({ theme }) => theme.color.iconSeparator || theme.color.border};
`;
const ClearIcon = ({ addClassNames }) => (React.createElement(ClearSvg, { "aria-hidden": 'true', viewBox: '0 0 14 16', className: addClassNames ? CLEAR_ICON_CLS : undefined },
    React.createElement("path", { fillRule: 'evenodd', d: 'M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z' })));
const IndicatorIcons = memo(({ menuOpen, clearIcon, caretIcon, isInvalid, showClear, isLoading, isDisabled, loadingNode, addClassNames, onCaretMouseDown, onClearMouseDown }) => {
    const forwardState = (typeof caretIcon === 'function' || typeof clearIcon === 'function')
        ? {
            menuOpen,
            isLoading: !!isLoading,
            isInvalid: !!isInvalid,
            isDisabled: !!isDisabled
        }
        : undefined;
    const renderIconFn = (renderer) => {
        return (typeof renderer === 'function') ? renderer(forwardState) : renderer;
    };
    return (React.createElement(IndicatorIconsWrapper, null,
        (showClear && !isLoading) && (React.createElement(IndicatorIcon, { onTouchEnd: onClearMouseDown, onMouseDown: onClearMouseDown, "data-testid": CLEAR_ICON_TESTID }, renderIconFn(clearIcon) || React.createElement(ClearIcon, { addClassNames: addClassNames }))),
        isLoading && (loadingNode || React.createElement(LoadingDots, { addClassNames: addClassNames })),
        React.createElement(Separator, null),
        React.createElement(IndicatorIcon, { onTouchEnd: onCaretMouseDown, onMouseDown: onCaretMouseDown, "data-testid": CARET_ICON_TESTID }, renderIconFn(caretIcon) || (React.createElement(Caret, { "aria-hidden": 'true', menuOpen: menuOpen, isInvalid: isInvalid, className: addClassNames ? CARET_ICON_CLS : undefined })))));
});
IndicatorIcons.displayName = 'IndicatorIcons';
export default IndicatorIcons;
