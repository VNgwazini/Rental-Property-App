import React, { useMemo, Fragment } from 'react';
import Option from './Option';
import styled from 'styled-components';
import { FixedSizeList } from 'react-window';
import { isArrayWithLength } from '../utils';
const NoOptionsMsg = styled.div `
  text-align: center;
  ${({ theme: { noOptions } }) => `
    color: ${noOptions.color};
    margin: ${noOptions.margin};
    padding: ${noOptions.padding};
    font-size: ${noOptions.fontSize};
  `}
  ${({ theme }) => theme.noOptions.css}
`;
const Menu = React.forwardRef(({ width, height, itemSize, isLoading, loadingMsg, menuOptions, selectOption, noOptionsMsg, overscanCount, itemKeySelector, renderOptionLabel, focusedOptionIndex }, ref) => {
    const itemKey = useMemo(() => {
        return itemKeySelector
            ? (idx, data) => data.menuOptions[idx][itemKeySelector]
            : undefined;
    }, [itemKeySelector]);
    const itemData = useMemo(() => ({
        menuOptions,
        selectOption,
        renderOptionLabel,
        focusedOptionIndex
    }), [menuOptions, focusedOptionIndex, selectOption, renderOptionLabel]);
    if (isLoading) {
        return React.createElement(NoOptionsMsg, null, loadingMsg);
    }
    return (React.createElement(Fragment, null,
        React.createElement(FixedSizeList, { ref: ref, width: width, height: height, itemKey: itemKey, itemSize: itemSize, itemData: itemData, overscanCount: overscanCount, itemCount: menuOptions.length }, Option),
        !isArrayWithLength(menuOptions) && React.createElement(NoOptionsMsg, null, noOptionsMsg)));
});
Menu.displayName = 'Menu';
export default Menu;
