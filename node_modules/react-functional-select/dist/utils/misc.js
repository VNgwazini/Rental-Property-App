import { EMPTY_ARRAY } from '../constants/defaults';
import { DIACRITICS_REGEXP } from '../constants/regexp';
import { OPTION_CLS, OPTION_FOCUSED_CLS, OPTION_SELECTED_CLS, OPTION_DISABLED_CLS } from '../constants/dom';
function stripDiacritics(value) {
    return value.normalize('NFD').replace(DIACRITICS_REGEXP, '');
}
export function isArrayWithLength(test) {
    return Array.isArray(test) && !!test.length;
}
export function isPlainObject(test) {
    return (test !== null) && (typeof test === 'object') && !Array.isArray(test);
}
export function trimAndFormatFilterStr(value, filterIgnoreCase, filterIgnoreAccents) {
    let trimVal = value.trim();
    if (filterIgnoreCase) {
        trimVal = trimVal.toLowerCase();
    }
    return !filterIgnoreAccents ? trimVal : stripDiacritics(trimVal);
}
export function buildOptionClassName(isDisabled, isSelected, isFocused) {
    let className = OPTION_CLS;
    if (isDisabled)
        className += (' ' + OPTION_DISABLED_CLS);
    if (isSelected)
        className += (' ' + OPTION_SELECTED_CLS);
    if (isFocused)
        className += (' ' + OPTION_FOCUSED_CLS);
    return className;
}
export function normalizeValue(value, getOptionValue, getOptionLabel) {
    const initialValues = Array.isArray(value)
        ? value
        : isPlainObject(value)
            ? [value]
            : EMPTY_ARRAY;
    return isArrayWithLength(initialValues)
        ? initialValues.map((x) => ({
            data: x,
            value: getOptionValue(x),
            label: getOptionLabel(x)
        }))
        : initialValues;
}
export const mergeDeep = (target, source) => {
    const output = { ...target };
    Object.keys(source).forEach((key) => {
        const sourceProp = source[key];
        output[key] =
            (isPlainObject(sourceProp) && key !== 'animation')
                ? (key in target)
                    ? mergeDeep(target[key], sourceProp)
                    : sourceProp
                : sourceProp || '';
    });
    return output;
};
