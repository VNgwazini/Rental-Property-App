import React, { useEffect, useMemo, useState, useCallback, useRef, useImperativeHandle } from 'react';
import { RfsTheme } from './theme';
import styled, { css, ThemeProvider } from 'styled-components';
import { Menu, Value, AutosizeInput, IndicatorIcons, AriaLiveRegion } from './components';
import { useDebounce, useMenuPositioner, useMenuOptions, useUpdateEffect } from './hooks';
import { mergeDeep, isTouchDevice, isPlainObject, normalizeValue, isArrayWithLength } from './utils';
import { MenuPositionEnum, FilterMatchEnum, ValueIndexEnum, OptionIndexEnum } from './constants/enums';
import { OPTIONS_DEFAULT, LOADING_MSG_DEFAULT, PLACEHOLDER_DEFAULT, FOCUSED_MULTI_DEFAULT, FOCUSED_OPTION_DEFAULT, NO_OPTIONS_MSG_DEFAULT, MENU_ITEM_SIZE_DEFAULT, MENU_MAX_HEIGHT_DEFAULT, SELECTED_OPTION_DEFAULT, ON_CHANGE_SINGLE_VALUE_DEFAULT } from './constants/defaults';
import { OPTION_CLS, OPTION_FOCUSED_CLS, MENU_CONTAINER_CLS, OPTION_DISABLED_CLS, OPTION_SELECTED_CLS, SELECT_CONTAINER_CLS, CONTROL_CONTAINER_CLS, MENU_CONTAINER_TESTID, SELECT_CONTAINER_TESTID, CONTROL_CONTAINER_TESTID } from './constants/dom';
const SelectWrapper = styled.div `
  position: relative;
  box-sizing: border-box;
  ${({ theme }) => theme.select.css}
`;
const ValueWrapper = styled.div `
  flex: 1 1 0%;
  display: flex;
  flex-wrap: wrap;
  overflow: hidden;
  position: relative;
  align-items: center;
  box-sizing: border-box;
  padding: ${({ theme }) => theme.control.padding};
`;
const ControlWrapper = styled.div `
  outline: 0;
  display: flex;
  flex-wrap: wrap;
  cursor: default;
  position: relative;
  align-items: center;
  box-sizing: border-box;
  justify-content: space-between;
  ${({ isDisabled, isFocused, isInvalid, theme: { control, color } }) => `
    transition: ${control.transition};
    border-style: ${control.borderStyle};
    border-width: ${control.borderWidth};
    border-radius: ${control.borderRadius};
    min-height: ${control.height || control.minHeight};
    border-color: ${(isInvalid ? color.danger : (isFocused ? control.focusedBorderColor : color.border))};
    ${isDisabled ? 'pointer-events: none;' : ''}
    ${control.height ? `height: ${control.height};` : ''}
    ${(control.backgroundColor || isDisabled) ? `background-color: ${isDisabled ? color.disabled : control.backgroundColor};` : ''}
    ${isFocused ? `box-shadow: ${control.boxShadow} ${isInvalid ? color.dangerLight : control.boxShadowColor};` : ''}
  `}
  ${({ theme }) => theme.control.css}
  ${({ isFocused, theme }) => isFocused && theme.control.focusedCss}
`;
const MenuWrapper = styled.div `
  z-index: 999;
  cursor: default;
  position: absolute;
  ${({ menuTop, hideMenu, theme: { menu } }) => `
    width: ${menu.width};
    margin: ${menu.margin};
    padding: ${menu.padding};
    box-shadow: ${menu.boxShadow};
    border-radius: ${menu.borderRadius};
    background-color: ${menu.backgroundColor};
    ${hideMenu ? 'display: none;' : ''}
    ${menuTop ? `top: ${menuTop};` : ''}
  `}

  animation: ${({ theme }) => css `${theme.menu.animation}`};
  ${({ theme }) => theme.menu.css}

  .${OPTION_CLS} {
    display: block;
    overflow: hidden;
    user-select: none;
    white-space: nowrap;
    text-overflow: ellipsis;
    -webkit-tap-highlight-color: transparent;
    ${({ theme: { menu: { option } } }) => `
      padding: ${option.padding};
      text-align: ${option.textAlign};

      &.${OPTION_FOCUSED_CLS},
      &:hover:not(.${OPTION_DISABLED_CLS}):not(.${OPTION_SELECTED_CLS}) {
        background-color: ${option.focusedBgColor};
      }

      &.${OPTION_SELECTED_CLS} {
        color: ${option.selectedColor};
        background-color: ${option.selectedBgColor};
      }

      &.${OPTION_DISABLED_CLS} {
        opacity: 0.35;
      }
    `}
  }
`;
const Select = React.forwardRef(({ async, isMulti, inputId, selectId, required, autoFocus, isLoading, onKeyDown, clearIcon, caretIcon, isInvalid, ariaLabel, menuWidth, isDisabled, inputDelay, onMenuOpen, onMenuClose, onInputBlur, isClearable, themeConfig, loadingNode, initialValue, onInputFocus, onInputChange, addClassNames, ariaLabelledBy, onOptionChange, onSearchChange, getOptionLabel, getOptionValue, itemKeySelector, openMenuOnFocus, isAriaLiveEnabled, menuOverscanCount, blurInputOnSelect, renderOptionLabel, renderMultiOptions, menuScrollDuration, filterIgnoreAccents, hideSelectedOptions, getIsOptionDisabled, getFilterOptionString, isSearchable = true, openMenuOnClick = true, filterIgnoreCase = true, tabSelectsOption = true, closeMenuOnSelect = true, scrollMenuIntoView = true, backspaceClearsValue = true, filterMatchFrom = FilterMatchEnum.ANY, menuPosition = MenuPositionEnum.BOTTOM, options = OPTIONS_DEFAULT, loadingMsg = LOADING_MSG_DEFAULT, placeholder = PLACEHOLDER_DEFAULT, noOptionsMsg = NO_OPTIONS_MSG_DEFAULT, menuItemSize = MENU_ITEM_SIZE_DEFAULT, menuMaxHeight = MENU_MAX_HEIGHT_DEFAULT }, ref) => {
    const menuOpenRef = useRef(false);
    const prevMenuOptionsLength = useRef();
    const onChangeEventValue = useRef(false);
    const listRef = useRef(null);
    const menuRef = useRef(null);
    const inputRef = useRef(null);
    const controlRef = useRef(null);
    const [inputValue, setInputValue] = useState('');
    const [menuOpen, setMenuOpen] = useState(false);
    const [isFocused, setIsFocused] = useState(false);
    const [focusedOption, setFocusedOption] = useState(FOCUSED_OPTION_DEFAULT);
    const [focusedMultiValue, setFocusedMultiValue] = useState(FOCUSED_MULTI_DEFAULT);
    const theme = useMemo(() => {
        return isPlainObject(themeConfig)
            ? mergeDeep(RfsTheme, themeConfig)
            : RfsTheme;
    }, [themeConfig]);
    const getOptionLabelFn = useMemo(() => getOptionLabel || ((data) => data.label), [getOptionLabel]);
    const getOptionValueFn = useMemo(() => getOptionValue || ((data) => data.value), [getOptionValue]);
    const renderOptionLabelFn = useMemo(() => renderOptionLabel || getOptionLabelFn, [renderOptionLabel, getOptionLabelFn]);
    const debouncedInputValue = useDebounce(inputValue, inputDelay);
    const [selectedOption, setSelectedOption] = useState(() => normalizeValue(initialValue, getOptionValueFn, getOptionLabelFn));
    const menuOptions = useMenuOptions(options, debouncedInputValue, filterMatchFrom, selectedOption, getOptionValueFn, getOptionLabelFn, getIsOptionDisabled, getFilterOptionString, filterIgnoreCase, filterIgnoreAccents, isMulti, hideSelectedOptions, async);
    const { menuStyleTop, menuHeightCalc } = useMenuPositioner(menuRef, controlRef, menuOpen, menuPosition, menuItemSize, menuMaxHeight, menuOptions.length, menuScrollDuration, scrollMenuIntoView, onMenuOpen, onMenuClose);
    const blurInput = () => {
        inputRef.current && inputRef.current.blur();
    };
    const focusInput = () => {
        inputRef.current && inputRef.current.focus();
    };
    const scrollToItemIndex = (index) => {
        listRef.current && listRef.current.scrollToItem(index);
    };
    const removeSelectedOption = useCallback((removeValue, e) => {
        if (e) {
            e.stopPropagation();
            (e.type === 'mousedown') && e.preventDefault();
        }
        setSelectedOption((prevSelectedOption) => prevSelectedOption.filter(({ value }) => value !== removeValue));
    }, []);
    const openMenuAndFocusOption = useCallback((position) => {
        if (!isArrayWithLength(menuOptions)) {
            setMenuOpen(true);
            return;
        }
        const selectedIndex = !isMulti
            ? menuOptions.findIndex(({ isSelected }) => isSelected)
            : -1;
        const index = (selectedIndex > -1)
            ? selectedIndex
            : ((position === OptionIndexEnum.FIRST) ? 0 : (menuOptions.length - 1));
        setMenuOpen(true);
        setFocusedOption({ index, ...menuOptions[index] });
        scrollToItemIndex(index);
    }, [isMulti, menuOptions]);
    const selectOption = useCallback((option, isSelected) => {
        if (isSelected) {
            isMulti && removeSelectedOption(option.value);
        }
        else {
            setSelectedOption((prevSelectedOption) => !isMulti ? [option] : [...prevSelectedOption, option]);
        }
        const blurControl = (typeof blurInputOnSelect === 'boolean')
            ? blurInputOnSelect
            : isTouchDevice();
        if (blurControl) {
            blurInput();
        }
        else if (closeMenuOnSelect) {
            setMenuOpen(false);
            setInputValue('');
        }
    }, [isMulti, closeMenuOnSelect, removeSelectedOption, blurInputOnSelect]);
    useImperativeHandle(ref, () => ({
        blur: blurInput,
        focus: focusInput,
        clearValue: () => {
            setSelectedOption(SELECTED_OPTION_DEFAULT);
            setFocusedOption(FOCUSED_OPTION_DEFAULT);
        },
        setValue: (option) => {
            const normalizedOptions = normalizeValue(option, getOptionValueFn, getOptionLabelFn);
            setSelectedOption(normalizedOptions);
        },
        toggleMenu: (state) => {
            if (state === true || (state === undefined && !menuOpen)) {
                !isFocused && focusInput();
                openMenuAndFocusOption(OptionIndexEnum.FIRST);
            }
            else {
                blurInput();
            }
        },
    }));
    useEffect(() => {
        autoFocus && focusInput();
    }, [autoFocus]);
    useEffect(() => {
        menuOpenRef.current = menuOpen;
    }, [menuOpen]);
    useEffect(() => {
        if (isFocused && openMenuOnFocus) {
            openMenuAndFocusOption(OptionIndexEnum.FIRST);
        }
    }, [isFocused, openMenuOnFocus, openMenuAndFocusOption]);
    useEffect(() => {
        if (onSearchChange && onChangeEventValue.current) {
            onChangeEventValue.current = false;
            onSearchChange(debouncedInputValue);
        }
    }, [onSearchChange, debouncedInputValue]);
    useUpdateEffect(() => {
        if (!onOptionChange)
            return;
        const normalizedOptionValue = isMulti
            ? selectedOption.map(({ data }) => data)
            : isArrayWithLength(selectedOption)
                ? selectedOption[0].data
                : ON_CHANGE_SINGLE_VALUE_DEFAULT;
        onOptionChange(normalizedOptionValue);
    }, [isMulti, selectedOption, onOptionChange]);
    useUpdateEffect(() => {
        const { length } = menuOptions;
        const inputChanged = length > 0 && (async || (length !== options.length || prevMenuOptionsLength.current === 0));
        if (length === 0) {
            setFocusedOption(FOCUSED_OPTION_DEFAULT);
        }
        else if (length === 1 || inputChanged) {
            setFocusedOption({ index: 0, ...menuOptions[0] });
            scrollToItemIndex(0);
        }
        prevMenuOptionsLength.current = length;
    }, [async, options, menuOptions]);
    const selectOptionFromFocused = () => {
        const { data, value, label, isSelected, isDisabled: isOptionDisabled } = focusedOption;
        if (data && !isOptionDisabled) {
            selectOption({ data, value, label }, isSelected);
        }
    };
    const focusValueOnArrowKey = (direction) => {
        if (!isArrayWithLength(selectedOption))
            return;
        let nextFocusedIndex = -1;
        const lastValueIndex = (selectedOption.length - 1);
        const curFocusedIndex = focusedMultiValue ? selectedOption.findIndex(({ value }) => value === focusedMultiValue) : -1;
        switch (direction) {
            case ValueIndexEnum.NEXT:
                nextFocusedIndex = (curFocusedIndex > -1 && curFocusedIndex < lastValueIndex)
                    ? (curFocusedIndex + 1)
                    : -1;
                break;
            case ValueIndexEnum.PREVIOUS:
                nextFocusedIndex = (curFocusedIndex !== 0)
                    ? (curFocusedIndex === -1) ? lastValueIndex : (curFocusedIndex - 1)
                    : 0;
                break;
        }
        const nextFocusedVal = (nextFocusedIndex >= 0)
            ? selectedOption[nextFocusedIndex].value
            : FOCUSED_MULTI_DEFAULT;
        if (focusedOption.data)
            setFocusedOption(FOCUSED_OPTION_DEFAULT);
        if (nextFocusedVal !== focusedMultiValue)
            setFocusedMultiValue(nextFocusedVal);
    };
    const focusOptionOnArrowKey = (direction) => {
        if (!isArrayWithLength(menuOptions))
            return;
        const index = (direction === OptionIndexEnum.DOWN)
            ? ((focusedOption.index + 1) % menuOptions.length)
            : (focusedOption.index > 0)
                ? (focusedOption.index - 1)
                : (menuOptions.length - 1);
        focusedMultiValue && setFocusedMultiValue(FOCUSED_MULTI_DEFAULT);
        setFocusedOption({ index, ...menuOptions[index] });
        scrollToItemIndex(index);
    };
    const handleOnKeyDown = (e) => {
        if (isDisabled)
            return;
        if (onKeyDown) {
            onKeyDown(e, inputValue, focusedOption);
            if (e.defaultPrevented)
                return;
        }
        switch (e.key) {
            case 'ArrowDown':
                menuOpen
                    ? focusOptionOnArrowKey(OptionIndexEnum.DOWN)
                    : openMenuAndFocusOption(OptionIndexEnum.FIRST);
                break;
            case 'ArrowUp':
                menuOpen
                    ? focusOptionOnArrowKey(OptionIndexEnum.UP)
                    : openMenuAndFocusOption(OptionIndexEnum.LAST);
                break;
            case 'ArrowLeft':
                if (!isMulti || inputValue || renderMultiOptions)
                    return;
                focusValueOnArrowKey(ValueIndexEnum.PREVIOUS);
                break;
            case 'ArrowRight':
                if (!isMulti || inputValue || renderMultiOptions)
                    return;
                focusValueOnArrowKey(ValueIndexEnum.NEXT);
                break;
            case ' ':
                if (inputValue) {
                    return;
                }
                else if (!menuOpen) {
                    openMenuAndFocusOption(OptionIndexEnum.FIRST);
                    break;
                }
                else if (!focusedOption.data) {
                    return;
                }
                selectOptionFromFocused();
                break;
            case 'Enter':
                if (menuOpen && e.keyCode !== 229) {
                    selectOptionFromFocused();
                }
                break;
            case 'Escape':
                if (menuOpen) {
                    setMenuOpen(false);
                    setInputValue('');
                }
                break;
            case 'Tab':
                if (!menuOpen || !tabSelectsOption || !focusedOption.data || e.shiftKey) {
                    return;
                }
                selectOptionFromFocused();
                break;
            case 'Delete':
            case 'Backspace':
                if (inputValue)
                    return;
                if (focusedMultiValue) {
                    const clearFocusedIndex = selectedOption.findIndex(({ value }) => value === focusedMultiValue);
                    const nexFocusedMultiValue = (clearFocusedIndex > -1 && (clearFocusedIndex < (selectedOption.length - 1)))
                        ? selectedOption[clearFocusedIndex + 1].value
                        : FOCUSED_MULTI_DEFAULT;
                    removeSelectedOption(focusedMultiValue);
                    setFocusedMultiValue(nexFocusedMultiValue);
                }
                else {
                    if (!backspaceClearsValue)
                        return;
                    if (isArrayWithLength(selectedOption)) {
                        if (isMulti && !renderMultiOptions) {
                            const { value } = selectedOption[selectedOption.length - 1];
                            removeSelectedOption(value);
                        }
                        else if (isClearable) {
                            setSelectedOption(SELECTED_OPTION_DEFAULT);
                        }
                    }
                }
                break;
            default:
                return;
        }
        e.preventDefault();
    };
    const handleOnControlMouseDown = (e) => {
        if (isDisabled)
            return;
        if (!isFocused)
            focusInput();
        if (!menuOpen) {
            openMenuOnClick && openMenuAndFocusOption(OptionIndexEnum.FIRST);
        }
        else if (e.currentTarget.tagName !== 'INPUT') {
            setMenuOpen(false);
            inputValue && setInputValue('');
        }
        if (e.currentTarget.tagName !== 'INPUT') {
            e.preventDefault();
        }
    };
    const handleOnMenuMouseDown = (e) => {
        e.stopPropagation();
        e.preventDefault();
        focusInput();
    };
    const handleOnInputBlur = useCallback((e) => {
        onInputBlur && onInputBlur(e);
        setIsFocused(false);
        setMenuOpen(false);
        setInputValue('');
    }, [onInputBlur]);
    const handleOnInputFocus = useCallback((e) => {
        onInputFocus && onInputFocus(e);
        setIsFocused(true);
    }, [onInputFocus]);
    const handleOnInputChange = useCallback((e) => {
        onChangeEventValue.current = true;
        onInputChange && onInputChange(e.currentTarget.value || '');
        !menuOpenRef.current && setMenuOpen(true);
        setInputValue(e.currentTarget.value || '');
    }, [onInputChange]);
    const handleOnClearMouseDown = useCallback((e) => {
        e.stopPropagation();
        (e.type === 'mousedown') && e.preventDefault();
        setSelectedOption(SELECTED_OPTION_DEFAULT);
        focusInput();
    }, []);
    const handleOnCaretMouseDown = useCallback((e) => {
        e.stopPropagation();
        (e.type === 'mousedown') && e.preventDefault();
        focusInput();
        menuOpen ? setMenuOpen(false) : openMenuAndFocusOption(OptionIndexEnum.FIRST);
    }, [menuOpen, openMenuAndFocusOption]);
    return (React.createElement(ThemeProvider, { theme: theme },
        React.createElement(SelectWrapper, { id: selectId, role: 'combobox', "aria-haspopup": 'listbox', "aria-controls": inputId, onKeyDown: handleOnKeyDown, "data-testid": SELECT_CONTAINER_TESTID, "aria-expanded": menuOpen ? 'true' : 'false', className: addClassNames ? SELECT_CONTAINER_CLS : undefined },
            React.createElement(ControlWrapper, { ref: controlRef, isInvalid: isInvalid, isFocused: isFocused, isDisabled: isDisabled, onTouchEnd: handleOnControlMouseDown, onMouseDown: handleOnControlMouseDown, "data-testid": CONTROL_CONTAINER_TESTID, className: addClassNames ? CONTROL_CONTAINER_CLS : undefined },
                React.createElement(ValueWrapper, null,
                    React.createElement(Value, { isMulti: isMulti, inputValue: inputValue, placeholder: placeholder, selectedOption: selectedOption, focusedMultiValue: focusedMultiValue, renderOptionLabel: renderOptionLabelFn, renderMultiOptions: renderMultiOptions, removeSelectedOption: removeSelectedOption }),
                    React.createElement(AutosizeInput, { id: inputId, ref: inputRef, required: required, ariaLabel: ariaLabel, inputValue: inputValue, onBlur: handleOnInputBlur, onFocus: handleOnInputFocus, addClassNames: addClassNames, onChange: handleOnInputChange, ariaLabelledBy: ariaLabelledBy, selectedOption: selectedOption, readOnly: isDisabled || !isSearchable || !!focusedMultiValue })),
                React.createElement(IndicatorIcons, { menuOpen: menuOpen, clearIcon: clearIcon, caretIcon: caretIcon, isInvalid: isInvalid, isLoading: isLoading, isDisabled: isDisabled, loadingNode: loadingNode, addClassNames: addClassNames, onClearMouseDown: handleOnClearMouseDown, showClear: !!(isClearable && !isDisabled && isArrayWithLength(selectedOption)), onCaretMouseDown: (!isDisabled && !openMenuOnClick) ? handleOnCaretMouseDown : undefined })),
            React.createElement(MenuWrapper, { ref: menuRef, hideMenu: !menuOpen, menuTop: menuStyleTop, onMouseDown: handleOnMenuMouseDown, "data-testid": MENU_CONTAINER_TESTID, className: addClassNames ? MENU_CONTAINER_CLS : undefined },
                React.createElement(Menu, { ref: listRef, isLoading: isLoading, height: menuHeightCalc, itemSize: menuItemSize, loadingMsg: loadingMsg, menuOptions: menuOptions, noOptionsMsg: noOptionsMsg, selectOption: selectOption, itemKeySelector: itemKeySelector, overscanCount: menuOverscanCount, width: menuWidth || theme.menu.width, renderOptionLabel: renderOptionLabelFn, focusedOptionIndex: focusedOption.index })),
            isAriaLiveEnabled && (React.createElement(AriaLiveRegion, { menuOpen: menuOpen, isFocused: isFocused, ariaLabel: ariaLabel, inputValue: inputValue, isSearchable: isSearchable, focusedOption: focusedOption, selectedOption: selectedOption, optionCount: menuOptions.length })))));
});
Select.displayName = 'Select';
export default Select;
